
rfid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00000542  000005d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000542  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080020c  0080020c  000005e2  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000d50  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac7  00000000  00000000  00000df0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000235  00000000  00000000  000018b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004fa  00000000  00000000  00001aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00001fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001c6  00000000  00000000  00002134  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000039c  00000000  00000000  000022fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 21 02 	jmp	0x442	; 0x442 <__vector_54>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e4       	ldi	r30, 0x42	; 66
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a8 32       	cpi	r26, 0x28	; 40
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 88 02 	call	0x510	; 0x510 <main>
 122:	0c 94 9f 02 	jmp	0x53e	; 0x53e <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	86 e1       	ldi	r24, 0x16	; 22
 12c:	90 e9       	ldi	r25, 0x90	; 144
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_set_4bit+0x4>
 132:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 134:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 136:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 138:	80 e3       	ldi	r24, 0x30	; 48
 13a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 13c:	42 9a       	sbi	0x08, 2	; 8
 13e:	29 e5       	ldi	r18, 0x59	; 89
 140:	30 e4       	ldi	r19, 0x40	; 64
 142:	42 e0       	ldi	r20, 0x02	; 2
 144:	21 50       	subi	r18, 0x01	; 1
 146:	30 40       	sbci	r19, 0x00	; 0
 148:	40 40       	sbci	r20, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <lcd_set_4bit+0x1a>
 14c:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 14e:	42 98       	cbi	0x08, 2	; 8
 150:	a6 e1       	ldi	r26, 0x16	; 22
 152:	b0 e9       	ldi	r27, 0x90	; 144
 154:	11 97       	sbiw	r26, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <lcd_set_4bit+0x2a>
 158:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 15a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 15c:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 15e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 160:	42 9a       	sbi	0x08, 2	; 8
 162:	29 e5       	ldi	r18, 0x59	; 89
 164:	30 e4       	ldi	r19, 0x40	; 64
 166:	42 e0       	ldi	r20, 0x02	; 2
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	30 40       	sbci	r19, 0x00	; 0
 16c:	40 40       	sbci	r20, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <lcd_set_4bit+0x3e>
 170:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 172:	42 98       	cbi	0x08, 2	; 8
 174:	a6 e1       	ldi	r26, 0x16	; 22
 176:	b0 e9       	ldi	r27, 0x90	; 144
 178:	11 97       	sbiw	r26, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_set_4bit+0x4e>
 17c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 17e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 180:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 182:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 184:	42 9a       	sbi	0x08, 2	; 8
 186:	29 e5       	ldi	r18, 0x59	; 89
 188:	30 e4       	ldi	r19, 0x40	; 64
 18a:	42 e0       	ldi	r20, 0x02	; 2
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	30 40       	sbci	r19, 0x00	; 0
 190:	40 40       	sbci	r20, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <lcd_set_4bit+0x62>
 194:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 196:	42 98       	cbi	0x08, 2	; 8
 198:	86 e1       	ldi	r24, 0x16	; 22
 19a:	90 e9       	ldi	r25, 0x90	; 144
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_set_4bit+0x72>
 1a0:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 1a2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 1a4:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
 1a6:	80 e2       	ldi	r24, 0x20	; 32
 1a8:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 1aa:	42 9a       	sbi	0x08, 2	; 8
 1ac:	29 e5       	ldi	r18, 0x59	; 89
 1ae:	30 e4       	ldi	r19, 0x40	; 64
 1b0:	42 e0       	ldi	r20, 0x02	; 2
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	30 40       	sbci	r19, 0x00	; 0
 1b6:	40 40       	sbci	r20, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <lcd_set_4bit+0x88>
 1ba:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1bc:	42 98       	cbi	0x08, 2	; 8

	
}
 1be:	08 95       	ret

000001c0 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 1c0:	98 b1       	in	r25, 0x08	; 8
 1c2:	9f 70       	andi	r25, 0x0F	; 15
 1c4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 1c6:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 1c8:	28 2f       	mov	r18, r24
 1ca:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 1cc:	92 2b       	or	r25, r18
 1ce:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 1d0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1d2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1d4:	42 9a       	sbi	0x08, 2	; 8
 1d6:	29 e5       	ldi	r18, 0x59	; 89
 1d8:	30 e4       	ldi	r19, 0x40	; 64
 1da:	42 e0       	ldi	r20, 0x02	; 2
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	30 40       	sbci	r19, 0x00	; 0
 1e0:	40 40       	sbci	r20, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <lcd_wr_command+0x1c>
 1e4:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1e6:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 1e8:	98 b1       	in	r25, 0x08	; 8
 1ea:	9f 70       	andi	r25, 0x0F	; 15
 1ec:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 1ee:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 1f0:	82 95       	swap	r24
 1f2:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 1f4:	89 2b       	or	r24, r25
 1f6:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 1f8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1fa:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1fc:	42 9a       	sbi	0x08, 2	; 8
 1fe:	89 e5       	ldi	r24, 0x59	; 89
 200:	90 e4       	ldi	r25, 0x40	; 64
 202:	a2 e0       	ldi	r26, 0x02	; 2
 204:	81 50       	subi	r24, 0x01	; 1
 206:	90 40       	sbci	r25, 0x00	; 0
 208:	a0 40       	sbci	r26, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <lcd_wr_command+0x44>
 20c:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 20e:	42 98       	cbi	0x08, 2	; 8
}
 210:	08 95       	ret

00000212 <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
 212:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
 216:	86 e1       	ldi	r24, 0x16	; 22
 218:	90 e9       	ldi	r25, 0x90	; 144
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <lcd_init+0x8>
 21e:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 220:	88 e2       	ldi	r24, 0x28	; 40
 222:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_wr_command>
	lcd_wr_command(0x01);
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_wr_command>
	lcd_wr_command(0x06);
 22c:	86 e0       	ldi	r24, 0x06	; 6
 22e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_wr_command>
	lcd_wr_command(0x0E);
 232:	8e e0       	ldi	r24, 0x0E	; 14
 234:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_wr_command>
	lcd_wr_command(0x80);
 238:	80 e8       	ldi	r24, 0x80	; 128
 23a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_wr_command>
		
}
 23e:	08 95       	ret

00000240 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 240:	98 b1       	in	r25, 0x08	; 8
 242:	9f 70       	andi	r25, 0x0F	; 15
 244:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 246:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 248:	28 2f       	mov	r18, r24
 24a:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 24c:	92 2b       	or	r25, r18
 24e:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 250:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 252:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 254:	42 9a       	sbi	0x08, 2	; 8
 256:	29 e5       	ldi	r18, 0x59	; 89
 258:	30 e4       	ldi	r19, 0x40	; 64
 25a:	42 e0       	ldi	r20, 0x02	; 2
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	30 40       	sbci	r19, 0x00	; 0
 260:	40 40       	sbci	r20, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <lcd_wr_char+0x1c>
 264:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 266:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 268:	98 b1       	in	r25, 0x08	; 8
 26a:	9f 70       	andi	r25, 0x0F	; 15
 26c:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 26e:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 270:	82 95       	swap	r24
 272:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 274:	89 2b       	or	r24, r25
 276:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 278:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 27a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 27c:	42 9a       	sbi	0x08, 2	; 8
 27e:	89 e5       	ldi	r24, 0x59	; 89
 280:	90 e4       	ldi	r25, 0x40	; 64
 282:	a2 e0       	ldi	r26, 0x02	; 2
 284:	81 50       	subi	r24, 0x01	; 1
 286:	90 40       	sbci	r25, 0x00	; 0
 288:	a0 40       	sbci	r26, 0x00	; 0
 28a:	e1 f7       	brne	.-8      	; 0x284 <lcd_wr_char+0x44>
 28c:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 28e:	42 98       	cbi	0x08, 2	; 8
}
 290:	08 95       	ret

00000292 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
 292:	80 e8       	ldi	r24, 0x80	; 128
 294:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_wr_command>
}
 298:	08 95       	ret

0000029a <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	ec 01       	movw	r28, r24
	while(*str != '\0')
 2a0:	88 81       	ld	r24, Y
 2a2:	88 23       	and	r24, r24
 2a4:	31 f0       	breq	.+12     	; 0x2b2 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
 2a6:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 2a8:	0e 94 20 01 	call	0x240	; 0x240 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
 2ac:	89 91       	ld	r24, Y+
 2ae:	88 23       	and	r24, r24
 2b0:	d9 f7       	brne	.-10     	; 0x2a8 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	08 95       	ret

000002b8 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
 2b8:	82 30       	cpi	r24, 0x02	; 2
 2ba:	79 f0       	breq	.+30     	; 0x2da <lcd_cursor+0x22>
 2bc:	83 30       	cpi	r24, 0x03	; 3
 2be:	18 f4       	brcc	.+6      	; 0x2c6 <lcd_cursor+0xe>
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	c9 f4       	brne	.+50     	; 0x2f6 <lcd_cursor+0x3e>
 2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <lcd_cursor+0x18>
 2c6:	83 30       	cpi	r24, 0x03	; 3
 2c8:	69 f0       	breq	.+26     	; 0x2e4 <lcd_cursor+0x2c>
 2ca:	84 30       	cpi	r24, 0x04	; 4
 2cc:	a1 f4       	brne	.+40     	; 0x2f6 <lcd_cursor+0x3e>
 2ce:	0f c0       	rjmp	.+30     	; 0x2ee <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 2d0:	86 2f       	mov	r24, r22
 2d2:	81 58       	subi	r24, 0x81	; 129
 2d4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_wr_command>
 2d8:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 2da:	86 2f       	mov	r24, r22
 2dc:	81 54       	subi	r24, 0x41	; 65
 2de:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_wr_command>
 2e2:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 2e4:	86 2f       	mov	r24, r22
 2e6:	8d 56       	subi	r24, 0x6D	; 109
 2e8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_wr_command>
 2ec:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 2ee:	86 2f       	mov	r24, r22
 2f0:	8d 52       	subi	r24, 0x2D	; 45
 2f2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_wr_command>
 2f6:	08 95       	ret

000002f8 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	8a 01       	movw	r16, r20
 302:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 304:	88 23       	and	r24, r24
 306:	11 f0       	breq	.+4      	; 0x30c <lcd_print+0x14>
 308:	66 23       	and	r22, r22
 30a:	19 f4       	brne	.+6      	; 0x312 <lcd_print+0x1a>
	{
		lcd_home();
 30c:	0e 94 49 01 	call	0x292	; 0x292 <lcd_home>
 310:	02 c0       	rjmp	.+4      	; 0x316 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 312:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 316:	c5 30       	cpi	r28, 0x05	; 5
 318:	d1 05       	cpc	r29, r1
 31a:	71 f4       	brne	.+28     	; 0x338 <lcd_print+0x40>
	{
		million=value/10000+48;
 31c:	c8 01       	movw	r24, r16
 31e:	60 e1       	ldi	r22, 0x10	; 16
 320:	77 e2       	ldi	r23, 0x27	; 39
 322:	0e 94 8b 02 	call	0x516	; 0x516 <__udivmodhi4>
 326:	cb 01       	movw	r24, r22
 328:	c0 96       	adiw	r24, 0x30	; 48
 32a:	90 93 1d 02 	sts	0x021D, r25
 32e:	80 93 1c 02 	sts	0x021C, r24
		lcd_wr_char(million);
 332:	0e 94 20 01 	call	0x240	; 0x240 <lcd_wr_char>
 336:	03 c0       	rjmp	.+6      	; 0x33e <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
 338:	c4 30       	cpi	r28, 0x04	; 4
 33a:	d1 05       	cpc	r29, r1
 33c:	b9 f4       	brne	.+46     	; 0x36c <lcd_print+0x74>
	{
		temp = value/1000;
 33e:	c8 01       	movw	r24, r16
 340:	68 ee       	ldi	r22, 0xE8	; 232
 342:	73 e0       	ldi	r23, 0x03	; 3
 344:	0e 94 8b 02 	call	0x516	; 0x516 <__udivmodhi4>
 348:	cb 01       	movw	r24, r22
 34a:	70 93 1f 02 	sts	0x021F, r23
 34e:	60 93 1e 02 	sts	0x021E, r22
		thousand = temp%10 + 48;
 352:	6a e0       	ldi	r22, 0x0A	; 10
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	0e 94 8b 02 	call	0x516	; 0x516 <__udivmodhi4>
 35a:	c0 96       	adiw	r24, 0x30	; 48
 35c:	90 93 27 02 	sts	0x0227, r25
 360:	80 93 26 02 	sts	0x0226, r24
		lcd_wr_char(thousand);
 364:	0e 94 20 01 	call	0x240	; 0x240 <lcd_wr_char>
		flag=1;
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	01 c0       	rjmp	.+2      	; 0x36e <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
 36c:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 36e:	c3 30       	cpi	r28, 0x03	; 3
 370:	d1 05       	cpc	r29, r1
 372:	11 f0       	breq	.+4      	; 0x378 <lcd_print+0x80>
 374:	81 30       	cpi	r24, 0x01	; 1
 376:	b1 f4       	brne	.+44     	; 0x3a4 <lcd_print+0xac>
	{
		temp = value/100;
 378:	c8 01       	movw	r24, r16
 37a:	64 e6       	ldi	r22, 0x64	; 100
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	0e 94 8b 02 	call	0x516	; 0x516 <__udivmodhi4>
 382:	cb 01       	movw	r24, r22
 384:	70 93 1f 02 	sts	0x021F, r23
 388:	60 93 1e 02 	sts	0x021E, r22
		hundred = temp%10 + 48;
 38c:	6a e0       	ldi	r22, 0x0A	; 10
 38e:	70 e0       	ldi	r23, 0x00	; 0
 390:	0e 94 8b 02 	call	0x516	; 0x516 <__udivmodhi4>
 394:	c0 96       	adiw	r24, 0x30	; 48
 396:	90 93 23 02 	sts	0x0223, r25
 39a:	80 93 22 02 	sts	0x0222, r24
		lcd_wr_char(hundred);
 39e:	0e 94 20 01 	call	0x240	; 0x240 <lcd_wr_char>
		flag=1;
 3a2:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
 3a4:	c2 30       	cpi	r28, 0x02	; 2
 3a6:	d1 05       	cpc	r29, r1
 3a8:	11 f0       	breq	.+4      	; 0x3ae <lcd_print+0xb6>
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	b1 f4       	brne	.+44     	; 0x3da <lcd_print+0xe2>
	{
		temp = value/10;
 3ae:	2a e0       	ldi	r18, 0x0A	; 10
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	c8 01       	movw	r24, r16
 3b4:	b9 01       	movw	r22, r18
 3b6:	0e 94 8b 02 	call	0x516	; 0x516 <__udivmodhi4>
 3ba:	cb 01       	movw	r24, r22
 3bc:	70 93 1f 02 	sts	0x021F, r23
 3c0:	60 93 1e 02 	sts	0x021E, r22
		tens = temp%10 + 48;
 3c4:	b9 01       	movw	r22, r18
 3c6:	0e 94 8b 02 	call	0x516	; 0x516 <__udivmodhi4>
 3ca:	c0 96       	adiw	r24, 0x30	; 48
 3cc:	90 93 21 02 	sts	0x0221, r25
 3d0:	80 93 20 02 	sts	0x0220, r24
		lcd_wr_char(tens);
 3d4:	0e 94 20 01 	call	0x240	; 0x240 <lcd_wr_char>
		flag=1;
 3d8:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
 3da:	c1 30       	cpi	r28, 0x01	; 1
 3dc:	d1 05       	cpc	r29, r1
 3de:	11 f0       	breq	.+4      	; 0x3e4 <lcd_print+0xec>
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	61 f4       	brne	.+24     	; 0x3fc <lcd_print+0x104>
	{
		unit = value%10 + 48;
 3e4:	c8 01       	movw	r24, r16
 3e6:	6a e0       	ldi	r22, 0x0A	; 10
 3e8:	70 e0       	ldi	r23, 0x00	; 0
 3ea:	0e 94 8b 02 	call	0x516	; 0x516 <__udivmodhi4>
 3ee:	c0 96       	adiw	r24, 0x30	; 48
 3f0:	90 93 25 02 	sts	0x0225, r25
 3f4:	80 93 24 02 	sts	0x0224, r24
		lcd_wr_char(unit);
 3f8:	0e 94 20 01 	call	0x240	; 0x240 <lcd_wr_char>
	}
	if(digits>5)
 3fc:	c6 30       	cpi	r28, 0x06	; 6
 3fe:	d1 05       	cpc	r29, r1
 400:	1c f0       	brlt	.+6      	; 0x408 <lcd_print+0x110>
	{
		lcd_wr_char('E');
 402:	85 e4       	ldi	r24, 0x45	; 69
 404:	0e 94 20 01 	call	0x240	; 0x240 <lcd_wr_char>
	}
	
}
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	08 95       	ret

00000412 <lcd_port_config>:
unsigned char arr[12];
unsigned int i=0;
unsigned int j=0;
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; 
 412:	87 b1       	in	r24, 0x07	; 7
 414:	87 6f       	ori	r24, 0xF7	; 247
 416:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; 
 418:	88 b1       	in	r24, 0x08	; 8
 41a:	80 78       	andi	r24, 0x80	; 128
 41c:	88 b9       	out	0x08, r24	; 8

}
 41e:	08 95       	ret

00000420 <uart3_init>:


void uart3_init(void)
{
	UCSR3B = 0x00; //disable while setting baud rate
 420:	e1 e3       	ldi	r30, 0x31	; 49
 422:	f1 e0       	ldi	r31, 0x01	; 1
 424:	10 82       	st	Z, r1
	UCSR3A = 0x20;
 426:	80 e2       	ldi	r24, 0x20	; 32
 428:	80 93 30 01 	sts	0x0130, r24
	UCSR3C = 0x06;//(1<<USBS3) | (3<<UCSZ30);
 42c:	86 e0       	ldi	r24, 0x06	; 6
 42e:	80 93 32 01 	sts	0x0132, r24
	UBRR3L = 0x5F; 
 432:	8f e5       	ldi	r24, 0x5F	; 95
 434:	80 93 34 01 	sts	0x0134, r24
	UBRR3H = 0x00; 
 438:	10 92 35 01 	sts	0x0135, r1
	UCSR3B = 0x98;//(1<<RXEN3) | (1<<TXEN3);
 43c:	88 e9       	ldi	r24, 0x98	; 152
 43e:	80 83       	st	Z, r24
	
}
 440:	08 95       	ret

00000442 <__vector_54>:
	

SIGNAL(SIG_USART3_RECV) 		// ISR for receive complete interrupt
{
 442:	1f 92       	push	r1
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	0f 92       	push	r0
 44a:	0b b6       	in	r0, 0x3b	; 59
 44c:	0f 92       	push	r0
 44e:	11 24       	eor	r1, r1
 450:	2f 93       	push	r18
 452:	3f 93       	push	r19
 454:	4f 93       	push	r20
 456:	5f 93       	push	r21
 458:	6f 93       	push	r22
 45a:	7f 93       	push	r23
 45c:	8f 93       	push	r24
 45e:	9f 93       	push	r25
 460:	af 93       	push	r26
 462:	bf 93       	push	r27
 464:	ef 93       	push	r30
 466:	ff 93       	push	r31
arr[j] = UDR3; 				//making copy of data from UDR1 in 'data' variable 
 468:	80 91 0c 02 	lds	r24, 0x020C
 46c:	90 91 0d 02 	lds	r25, 0x020D
 470:	e6 e3       	ldi	r30, 0x36	; 54
 472:	f1 e0       	ldi	r31, 0x01	; 1
 474:	20 81       	ld	r18, Z
 476:	dc 01       	movw	r26, r24
 478:	a0 5f       	subi	r26, 0xF0	; 240
 47a:	bd 4f       	sbci	r27, 0xFD	; 253
 47c:	2c 93       	st	X, r18

UDR3=arr[j++];
 47e:	20 83       	st	Z, r18
 480:	01 96       	adiw	r24, 0x01	; 1
 482:	90 93 0d 02 	sts	0x020D, r25
 486:	80 93 0c 02 	sts	0x020C, r24
if(j==12)
 48a:	8c 30       	cpi	r24, 0x0C	; 12
 48c:	91 05       	cpc	r25, r1
 48e:	21 f5       	brne	.+72     	; 0x4d8 <__vector_54+0x96>
{
	j=0;i=0;
 490:	10 92 0d 02 	sts	0x020D, r1
 494:	10 92 0c 02 	sts	0x020C, r1
 498:	10 92 0f 02 	sts	0x020F, r1
 49c:	10 92 0e 02 	sts	0x020E, r1
	lcd_cursor(1,1);
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	61 e0       	ldi	r22, 0x01	; 1
 4a4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_cursor>
	lcd_string("   WELCOME");
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	92 e0       	ldi	r25, 0x02	; 2
 4ac:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_string>
	lcd_cursor(2,1);
 4b0:	82 e0       	ldi	r24, 0x02	; 2
 4b2:	61 e0       	ldi	r22, 0x01	; 1
 4b4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_cursor>
	lcd_string(arr);
 4b8:	80 e1       	ldi	r24, 0x10	; 16
 4ba:	92 e0       	ldi	r25, 0x02	; 2
 4bc:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_string>
 4c0:	8f ef       	ldi	r24, 0xFF	; 255
 4c2:	92 e2       	ldi	r25, 0x22	; 34
 4c4:	a1 ee       	ldi	r26, 0xE1	; 225
 4c6:	81 50       	subi	r24, 0x01	; 1
 4c8:	90 40       	sbci	r25, 0x00	; 0
 4ca:	a0 40       	sbci	r26, 0x00	; 0
 4cc:	e1 f7       	brne	.-8      	; 0x4c6 <__vector_54+0x84>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <__vector_54+0x8e>
 4d0:	00 00       	nop
	_delay_ms(500);
	lcd_wr_command(0x01);
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_wr_command>
}


}
 4d8:	ff 91       	pop	r31
 4da:	ef 91       	pop	r30
 4dc:	bf 91       	pop	r27
 4de:	af 91       	pop	r26
 4e0:	9f 91       	pop	r25
 4e2:	8f 91       	pop	r24
 4e4:	7f 91       	pop	r23
 4e6:	6f 91       	pop	r22
 4e8:	5f 91       	pop	r21
 4ea:	4f 91       	pop	r20
 4ec:	3f 91       	pop	r19
 4ee:	2f 91       	pop	r18
 4f0:	0f 90       	pop	r0
 4f2:	0b be       	out	0x3b, r0	; 59
 4f4:	0f 90       	pop	r0
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	0f 90       	pop	r0
 4fa:	1f 90       	pop	r1
 4fc:	18 95       	reti

000004fe <rf_init_devices>:

//Function To Initialize all The Devices
void rf_init_devices()
{
 cli(); //Clears the global interrupts
 4fe:	f8 94       	cli
 lcd_port_config();  //Initializes all the ports
 500:	0e 94 09 02 	call	0x412	; 0x412 <lcd_port_config>
 lcd_init();
 504:	0e 94 09 01 	call	0x212	; 0x212 <lcd_init>
 uart3_init(); //Initialize UART2 for serial communication
 508:	0e 94 10 02 	call	0x420	; 0x420 <uart3_init>
 sei();   
 50c:	78 94       	sei
}
 50e:	08 95       	ret

00000510 <main>:

int main(void)
{
	rf_init_devices();
 510:	0e 94 7f 02 	call	0x4fe	; 0x4fe <rf_init_devices>
 514:	ff cf       	rjmp	.-2      	; 0x514 <main+0x4>

00000516 <__udivmodhi4>:
 516:	aa 1b       	sub	r26, r26
 518:	bb 1b       	sub	r27, r27
 51a:	51 e1       	ldi	r21, 0x11	; 17
 51c:	07 c0       	rjmp	.+14     	; 0x52c <__udivmodhi4_ep>

0000051e <__udivmodhi4_loop>:
 51e:	aa 1f       	adc	r26, r26
 520:	bb 1f       	adc	r27, r27
 522:	a6 17       	cp	r26, r22
 524:	b7 07       	cpc	r27, r23
 526:	10 f0       	brcs	.+4      	; 0x52c <__udivmodhi4_ep>
 528:	a6 1b       	sub	r26, r22
 52a:	b7 0b       	sbc	r27, r23

0000052c <__udivmodhi4_ep>:
 52c:	88 1f       	adc	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	5a 95       	dec	r21
 532:	a9 f7       	brne	.-22     	; 0x51e <__udivmodhi4_loop>
 534:	80 95       	com	r24
 536:	90 95       	com	r25
 538:	bc 01       	movw	r22, r24
 53a:	cd 01       	movw	r24, r26
 53c:	08 95       	ret

0000053e <_exit>:
 53e:	f8 94       	cli

00000540 <__stop_program>:
 540:	ff cf       	rjmp	.-2      	; 0x540 <__stop_program>
