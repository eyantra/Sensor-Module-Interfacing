
accelerometer1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800200  00000664  000006f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000664  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800236  00800236  0000072e  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  00000730  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b89  00000000  00000000  00000f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000257  00000000  00000000  00001ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000556  00000000  00000000  00001d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00002278  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000239  00000000  00000000  000023bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002cc  00000000  00000000  000025f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e6       	ldi	r30, 0x64	; 100
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 33       	cpi	r26, 0x36	; 54
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a6 e3       	ldi	r26, 0x36	; 54
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 34       	cpi	r26, 0x4C	; 76
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 0b 03 	call	0x616	; 0x616 <main>
 122:	0c 94 30 03 	jmp	0x660	; 0x660 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	86 e6       	ldi	r24, 0x66	; 102
 12c:	9e e0       	ldi	r25, 0x0E	; 14
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_set_4bit+0x4>
 132:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 134:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 136:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 138:	80 e3       	ldi	r24, 0x30	; 48
 13a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 13c:	42 9a       	sbi	0x08, 2	; 8
 13e:	ef ef       	ldi	r30, 0xFF	; 255
 140:	f7 e4       	ldi	r31, 0x47	; 71
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_set_4bit+0x18>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_set_4bit+0x1e>
 148:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 14a:	42 98       	cbi	0x08, 2	; 8
 14c:	e6 e6       	ldi	r30, 0x66	; 102
 14e:	fe e0       	ldi	r31, 0x0E	; 14
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_set_4bit+0x26>
 154:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 156:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 158:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 15a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 15c:	42 9a       	sbi	0x08, 2	; 8
 15e:	ef ef       	ldi	r30, 0xFF	; 255
 160:	f7 e4       	ldi	r31, 0x47	; 71
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x38>
 166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x3e>
 168:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 16a:	42 98       	cbi	0x08, 2	; 8
 16c:	e6 e6       	ldi	r30, 0x66	; 102
 16e:	fe e0       	ldi	r31, 0x0E	; 14
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x46>
 174:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 176:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 178:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 17a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 17c:	42 9a       	sbi	0x08, 2	; 8
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	97 e4       	ldi	r25, 0x47	; 71
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_set_4bit+0x58>
 186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_set_4bit+0x5e>
 188:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 18a:	42 98       	cbi	0x08, 2	; 8
 18c:	e6 e6       	ldi	r30, 0x66	; 102
 18e:	fe e0       	ldi	r31, 0x0E	; 14
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_set_4bit+0x66>
 194:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 196:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 198:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
 19a:	80 e2       	ldi	r24, 0x20	; 32
 19c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 19e:	42 9a       	sbi	0x08, 2	; 8
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	97 e4       	ldi	r25, 0x47	; 71
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_set_4bit+0x7a>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_set_4bit+0x80>
 1aa:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1ac:	42 98       	cbi	0x08, 2	; 8

	
}
 1ae:	08 95       	ret

000001b0 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 1b0:	98 b1       	in	r25, 0x08	; 8
 1b2:	9f 70       	andi	r25, 0x0F	; 15
 1b4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 1b6:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 1b8:	28 2f       	mov	r18, r24
 1ba:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 1bc:	92 2b       	or	r25, r18
 1be:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 1c0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1c2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1c4:	42 9a       	sbi	0x08, 2	; 8
 1c6:	ef ef       	ldi	r30, 0xFF	; 255
 1c8:	f7 e4       	ldi	r31, 0x47	; 71
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_wr_command+0x1a>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_wr_command+0x20>
 1d0:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1d2:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 1d4:	98 b1       	in	r25, 0x08	; 8
 1d6:	9f 70       	andi	r25, 0x0F	; 15
 1d8:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 1da:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 1dc:	82 95       	swap	r24
 1de:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 1e0:	89 2b       	or	r24, r25
 1e2:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 1e4:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1e6:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1e8:	42 9a       	sbi	0x08, 2	; 8
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	97 e4       	ldi	r25, 0x47	; 71
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_wr_command+0x3e>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_wr_command+0x44>
 1f4:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1f6:	42 98       	cbi	0x08, 2	; 8
}
 1f8:	08 95       	ret

000001fa <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
 1fa:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
 1fe:	86 e6       	ldi	r24, 0x66	; 102
 200:	9e e0       	ldi	r25, 0x0E	; 14
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x8>
 206:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 208:	88 e2       	ldi	r24, 0x28	; 40
 20a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x01);
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x06);
 214:	86 e0       	ldi	r24, 0x06	; 6
 216:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x0E);
 21a:	8e e0       	ldi	r24, 0x0E	; 14
 21c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x80);
 220:	80 e8       	ldi	r24, 0x80	; 128
 222:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
		
}
 226:	08 95       	ret

00000228 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 228:	98 b1       	in	r25, 0x08	; 8
 22a:	9f 70       	andi	r25, 0x0F	; 15
 22c:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 22e:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 230:	28 2f       	mov	r18, r24
 232:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 234:	92 2b       	or	r25, r18
 236:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 238:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 23a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 23c:	42 9a       	sbi	0x08, 2	; 8
 23e:	ef ef       	ldi	r30, 0xFF	; 255
 240:	f7 e4       	ldi	r31, 0x47	; 71
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_wr_char+0x1a>
 246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_wr_char+0x20>
 248:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 24a:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 24c:	98 b1       	in	r25, 0x08	; 8
 24e:	9f 70       	andi	r25, 0x0F	; 15
 250:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 252:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 254:	82 95       	swap	r24
 256:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 258:	89 2b       	or	r24, r25
 25a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 25c:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 25e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 260:	42 9a       	sbi	0x08, 2	; 8
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	97 e4       	ldi	r25, 0x47	; 71
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <lcd_wr_char+0x3e>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <lcd_wr_char+0x44>
 26c:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 26e:	42 98       	cbi	0x08, 2	; 8
}
 270:	08 95       	ret

00000272 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
 272:	80 e8       	ldi	r24, 0x80	; 128
 274:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
}
 278:	08 95       	ret

0000027a <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	ec 01       	movw	r28, r24
	while(*str != '\0')
 280:	88 81       	ld	r24, Y
 282:	88 23       	and	r24, r24
 284:	31 f0       	breq	.+12     	; 0x292 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
 286:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 288:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
 28c:	89 91       	ld	r24, Y+
 28e:	88 23       	and	r24, r24
 290:	d9 f7       	brne	.-10     	; 0x288 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	79 f0       	breq	.+30     	; 0x2ba <lcd_cursor+0x22>
 29c:	83 30       	cpi	r24, 0x03	; 3
 29e:	18 f4       	brcc	.+6      	; 0x2a6 <lcd_cursor+0xe>
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	c9 f4       	brne	.+50     	; 0x2d6 <lcd_cursor+0x3e>
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <lcd_cursor+0x18>
 2a6:	83 30       	cpi	r24, 0x03	; 3
 2a8:	69 f0       	breq	.+26     	; 0x2c4 <lcd_cursor+0x2c>
 2aa:	84 30       	cpi	r24, 0x04	; 4
 2ac:	a1 f4       	brne	.+40     	; 0x2d6 <lcd_cursor+0x3e>
 2ae:	0f c0       	rjmp	.+30     	; 0x2ce <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 2b0:	86 2f       	mov	r24, r22
 2b2:	81 58       	subi	r24, 0x81	; 129
 2b4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2b8:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 2ba:	86 2f       	mov	r24, r22
 2bc:	81 54       	subi	r24, 0x41	; 65
 2be:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2c2:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 2c4:	86 2f       	mov	r24, r22
 2c6:	8d 56       	subi	r24, 0x6D	; 109
 2c8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2cc:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 2ce:	86 2f       	mov	r24, r22
 2d0:	8d 52       	subi	r24, 0x2D	; 45
 2d2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2d6:	08 95       	ret

000002d8 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	8a 01       	movw	r16, r20
 2e2:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 2e4:	88 23       	and	r24, r24
 2e6:	11 f0       	breq	.+4      	; 0x2ec <lcd_print+0x14>
 2e8:	66 23       	and	r22, r22
 2ea:	19 f4       	brne	.+6      	; 0x2f2 <lcd_print+0x1a>
	{
		lcd_home();
 2ec:	0e 94 39 01 	call	0x272	; 0x272 <lcd_home>
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 2f2:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 2f6:	c5 30       	cpi	r28, 0x05	; 5
 2f8:	d1 05       	cpc	r29, r1
 2fa:	71 f4       	brne	.+28     	; 0x318 <lcd_print+0x40>
	{
		million=value/10000+48;
 2fc:	c8 01       	movw	r24, r16
 2fe:	60 e1       	ldi	r22, 0x10	; 16
 300:	77 e2       	ldi	r23, 0x27	; 39
 302:	0e 94 1c 03 	call	0x638	; 0x638 <__udivmodhi4>
 306:	cb 01       	movw	r24, r22
 308:	c0 96       	adiw	r24, 0x30	; 48
 30a:	90 93 3d 02 	sts	0x023D, r25
 30e:	80 93 3c 02 	sts	0x023C, r24
		lcd_wr_char(million);
 312:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
 316:	03 c0       	rjmp	.+6      	; 0x31e <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
 318:	c4 30       	cpi	r28, 0x04	; 4
 31a:	d1 05       	cpc	r29, r1
 31c:	b9 f4       	brne	.+46     	; 0x34c <lcd_print+0x74>
	{
		temp = value/1000;
 31e:	c8 01       	movw	r24, r16
 320:	68 ee       	ldi	r22, 0xE8	; 232
 322:	73 e0       	ldi	r23, 0x03	; 3
 324:	0e 94 1c 03 	call	0x638	; 0x638 <__udivmodhi4>
 328:	cb 01       	movw	r24, r22
 32a:	70 93 40 02 	sts	0x0240, r23
 32e:	60 93 3f 02 	sts	0x023F, r22
		thousand = temp%10 + 48;
 332:	6a e0       	ldi	r22, 0x0A	; 10
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	0e 94 1c 03 	call	0x638	; 0x638 <__udivmodhi4>
 33a:	c0 96       	adiw	r24, 0x30	; 48
 33c:	90 93 4b 02 	sts	0x024B, r25
 340:	80 93 4a 02 	sts	0x024A, r24
		lcd_wr_char(thousand);
 344:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	01 c0       	rjmp	.+2      	; 0x34e <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
 34c:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 34e:	c3 30       	cpi	r28, 0x03	; 3
 350:	d1 05       	cpc	r29, r1
 352:	11 f0       	breq	.+4      	; 0x358 <lcd_print+0x80>
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	b1 f4       	brne	.+44     	; 0x384 <lcd_print+0xac>
	{
		temp = value/100;
 358:	c8 01       	movw	r24, r16
 35a:	64 e6       	ldi	r22, 0x64	; 100
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	0e 94 1c 03 	call	0x638	; 0x638 <__udivmodhi4>
 362:	cb 01       	movw	r24, r22
 364:	70 93 40 02 	sts	0x0240, r23
 368:	60 93 3f 02 	sts	0x023F, r22
		hundred = temp%10 + 48;
 36c:	6a e0       	ldi	r22, 0x0A	; 10
 36e:	70 e0       	ldi	r23, 0x00	; 0
 370:	0e 94 1c 03 	call	0x638	; 0x638 <__udivmodhi4>
 374:	c0 96       	adiw	r24, 0x30	; 48
 376:	90 93 47 02 	sts	0x0247, r25
 37a:	80 93 46 02 	sts	0x0246, r24
		lcd_wr_char(hundred);
 37e:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
 382:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
 384:	c2 30       	cpi	r28, 0x02	; 2
 386:	d1 05       	cpc	r29, r1
 388:	11 f0       	breq	.+4      	; 0x38e <lcd_print+0xb6>
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	b1 f4       	brne	.+44     	; 0x3ba <lcd_print+0xe2>
	{
		temp = value/10;
 38e:	2a e0       	ldi	r18, 0x0A	; 10
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	c8 01       	movw	r24, r16
 394:	b9 01       	movw	r22, r18
 396:	0e 94 1c 03 	call	0x638	; 0x638 <__udivmodhi4>
 39a:	cb 01       	movw	r24, r22
 39c:	70 93 40 02 	sts	0x0240, r23
 3a0:	60 93 3f 02 	sts	0x023F, r22
		tens = temp%10 + 48;
 3a4:	b9 01       	movw	r22, r18
 3a6:	0e 94 1c 03 	call	0x638	; 0x638 <__udivmodhi4>
 3aa:	c0 96       	adiw	r24, 0x30	; 48
 3ac:	90 93 44 02 	sts	0x0244, r25
 3b0:	80 93 43 02 	sts	0x0243, r24
		lcd_wr_char(tens);
 3b4:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
 3ba:	c1 30       	cpi	r28, 0x01	; 1
 3bc:	d1 05       	cpc	r29, r1
 3be:	11 f0       	breq	.+4      	; 0x3c4 <lcd_print+0xec>
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	61 f4       	brne	.+24     	; 0x3dc <lcd_print+0x104>
	{
		unit = value%10 + 48;
 3c4:	c8 01       	movw	r24, r16
 3c6:	6a e0       	ldi	r22, 0x0A	; 10
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	0e 94 1c 03 	call	0x638	; 0x638 <__udivmodhi4>
 3ce:	c0 96       	adiw	r24, 0x30	; 48
 3d0:	90 93 49 02 	sts	0x0249, r25
 3d4:	80 93 48 02 	sts	0x0248, r24
		lcd_wr_char(unit);
 3d8:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
	}
	if(digits>5)
 3dc:	c6 30       	cpi	r28, 0x06	; 6
 3de:	d1 05       	cpc	r29, r1
 3e0:	1c f0       	brlt	.+6      	; 0x3e8 <lcd_print+0x110>
	{
		lcd_wr_char('E');
 3e2:	85 e4       	ldi	r24, 0x45	; 69
 3e4:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
	}
	
}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	0f 91       	pop	r16
 3f0:	08 95       	ret

000003f2 <lcd_port_config>:
unsigned char ADC_Value;
unsigned char l=0,r=0,b=0,f=0,s=0,x,y,z, adc_reading;

void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; 		//all the LCD pin's direction set as output
 3f2:	87 b1       	in	r24, 0x07	; 7
 3f4:	87 6f       	ori	r24, 0xF7	; 247
 3f6:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; 		// all the LCD pins are set to logic 0 except PORTC 7
 3f8:	88 b1       	in	r24, 0x08	; 8
 3fa:	80 78       	andi	r24, 0x80	; 128
 3fc:	88 b9       	out	0x08, r24	; 8
}
 3fe:	08 95       	ret

00000400 <adc_pin_config>:


void adc_pin_config (void)
{
	DDRF = 0x00; 			//set PORTF direction as input
 400:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00;			//set PORTF pins floating
 402:	11 ba       	out	0x11, r1	; 17
	DDRK = 0x00; 			//set PORTK direction as input
 404:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0x00; 			//set PORTK pins floating
 408:	10 92 08 01 	sts	0x0108, r1
}
 40c:	08 95       	ret

0000040e <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
 40e:	ea e7       	ldi	r30, 0x7A	; 122
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	10 82       	st	Z, r1
	ADCSRB = 0x00;			//MUX5 = 0
 414:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;			//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 418:	80 e2       	ldi	r24, 0x20	; 32
 41a:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
 41e:	80 e8       	ldi	r24, 0x80	; 128
 420:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;			//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 422:	86 e8       	ldi	r24, 0x86	; 134
 424:	80 83       	st	Z, r24
}
 426:	08 95       	ret

00000428 <ADC_Conversion>:


unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	if(Ch>7)
 428:	88 30       	cpi	r24, 0x08	; 8
 42a:	18 f0       	brcs	.+6      	; 0x432 <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
 42c:	98 e0       	ldi	r25, 0x08	; 8
 42e:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;
 432:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;
 434:	80 62       	ori	r24, 0x20	; 32
 436:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
 43a:	ea e7       	ldi	r30, 0x7A	; 122
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	80 81       	ld	r24, Z
 440:	80 64       	ori	r24, 0x40	; 64
 442:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for ADC conversion to complete
 444:	80 81       	ld	r24, Z
 446:	84 ff       	sbrs	r24, 4
 448:	fd cf       	rjmp	.-6      	; 0x444 <ADC_Conversion+0x1c>
	a=ADCH;
 44a:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; 		//clear ADIF (ADC Interrupt Flag) by writing 1 to it
 44e:	ea e7       	ldi	r30, 0x7A	; 122
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	90 81       	ld	r25, Z
 454:	90 61       	ori	r25, 0x10	; 16
 456:	90 83       	st	Z, r25
	ADCSRB = 0x00;
 458:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
 45c:	08 95       	ret

0000045e <acc>:


void acc(void)
{
	
	x = ADC_Conversion(14);
 45e:	8e e0       	ldi	r24, 0x0E	; 14
 460:	0e 94 14 02 	call	0x428	; 0x428 <ADC_Conversion>
 464:	80 93 3b 02 	sts	0x023B, r24
	y= 	ADC_Conversion(15);	
 468:	8f e0       	ldi	r24, 0x0F	; 15
 46a:	0e 94 14 02 	call	0x428	; 0x428 <ADC_Conversion>
 46e:	80 93 45 02 	sts	0x0245, r24
	z= ADC_Conversion(11);
 472:	8b e0       	ldi	r24, 0x0B	; 11
 474:	0e 94 14 02 	call	0x428	; 0x428 <ADC_Conversion>
 478:	80 93 42 02 	sts	0x0242, r24
	lcd_cursor(1,1);
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	61 e0       	ldi	r22, 0x01	; 1
 480:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
	lcd_string("X = ");
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	92 e0       	ldi	r25, 0x02	; 2
 488:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
	lcd_print(1,4,x,3);
 48c:	40 91 3b 02 	lds	r20, 0x023B
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	64 e0       	ldi	r22, 0x04	; 4
 494:	50 e0       	ldi	r21, 0x00	; 0
 496:	23 e0       	ldi	r18, 0x03	; 3
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
	lcd_cursor(1,7);
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	67 e0       	ldi	r22, 0x07	; 7
 4a2:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
	lcd_string(" y = ");
 4a6:	85 e0       	ldi	r24, 0x05	; 5
 4a8:	92 e0       	ldi	r25, 0x02	; 2
 4aa:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
	lcd_print(1,11,y,3);
 4ae:	40 91 45 02 	lds	r20, 0x0245
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	6b e0       	ldi	r22, 0x0B	; 11
 4b6:	50 e0       	ldi	r21, 0x00	; 0
 4b8:	23 e0       	ldi	r18, 0x03	; 3
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
	lcd_cursor(2,1);
 4c0:	82 e0       	ldi	r24, 0x02	; 2
 4c2:	61 e0       	ldi	r22, 0x01	; 1
 4c4:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
	lcd_string("z = ");
 4c8:	8b e0       	ldi	r24, 0x0B	; 11
 4ca:	92 e0       	ldi	r25, 0x02	; 2
 4cc:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
	lcd_print(2,4,z,3);
 4d0:	40 91 42 02 	lds	r20, 0x0242
 4d4:	82 e0       	ldi	r24, 0x02	; 2
 4d6:	64 e0       	ldi	r22, 0x04	; 4
 4d8:	50 e0       	ldi	r21, 0x00	; 0
 4da:	23 e0       	ldi	r18, 0x03	; 3
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>

}
 4e2:	08 95       	ret

000004e4 <port_init>:


void port_init()
{
	
	lcd_port_config();
 4e4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <lcd_port_config>
	adc_pin_config();
 4e8:	0e 94 00 02 	call	0x400	; 0x400 <adc_pin_config>
}
 4ec:	08 95       	ret

000004ee <acc_process>:

void acc_process(void)
{
	if(x<90 && y>95 && z<107)					r=1;
 4ee:	80 91 3b 02 	lds	r24, 0x023B
 4f2:	8a 35       	cpi	r24, 0x5A	; 90
 4f4:	d0 f4       	brcc	.+52     	; 0x52a <acc_process+0x3c>
 4f6:	80 91 45 02 	lds	r24, 0x0245
 4fa:	80 36       	cpi	r24, 0x60	; 96
 4fc:	58 f0       	brcs	.+22     	; 0x514 <acc_process+0x26>
 4fe:	80 91 42 02 	lds	r24, 0x0242
 502:	8b 36       	cpi	r24, 0x6B	; 107
 504:	38 f4       	brcc	.+14     	; 0x514 <acc_process+0x26>
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	80 93 39 02 	sts	0x0239, r24
	if(x<90 && y<79 && z<107)					l=1;
 50c:	80 91 3b 02 	lds	r24, 0x023B
 510:	8a 35       	cpi	r24, 0x5A	; 90
 512:	58 f4       	brcc	.+22     	; 0x52a <acc_process+0x3c>
 514:	80 91 45 02 	lds	r24, 0x0245
 518:	8f 34       	cpi	r24, 0x4F	; 79
 51a:	38 f4       	brcc	.+14     	; 0x52a <acc_process+0x3c>
 51c:	80 91 42 02 	lds	r24, 0x0242
 520:	8b 36       	cpi	r24, 0x6B	; 107
 522:	18 f4       	brcc	.+6      	; 0x52a <acc_process+0x3c>
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	80 93 3a 02 	sts	0x023A, r24
	if(x>100 && y<95 && z<107)					b=1;
 52a:	80 91 3b 02 	lds	r24, 0x023B
 52e:	85 36       	cpi	r24, 0x65	; 101
 530:	58 f0       	brcs	.+22     	; 0x548 <acc_process+0x5a>
 532:	80 91 45 02 	lds	r24, 0x0245
 536:	8f 35       	cpi	r24, 0x5F	; 95
 538:	38 f4       	brcc	.+14     	; 0x548 <acc_process+0x5a>
 53a:	80 91 42 02 	lds	r24, 0x0242
 53e:	8b 36       	cpi	r24, 0x6B	; 107
 540:	18 f4       	brcc	.+6      	; 0x548 <acc_process+0x5a>
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	80 93 38 02 	sts	0x0238, r24
	if(x<75 && y<95 && z<107)					f=1;
 548:	80 91 3b 02 	lds	r24, 0x023B
 54c:	8b 34       	cpi	r24, 0x4B	; 75
 54e:	58 f4       	brcc	.+22     	; 0x566 <acc_process+0x78>
 550:	80 91 45 02 	lds	r24, 0x0245
 554:	8f 35       	cpi	r24, 0x5F	; 95
 556:	38 f4       	brcc	.+14     	; 0x566 <acc_process+0x78>
 558:	80 91 42 02 	lds	r24, 0x0242
 55c:	8b 36       	cpi	r24, 0x6B	; 107
 55e:	18 f4       	brcc	.+6      	; 0x566 <acc_process+0x78>
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	80 93 37 02 	sts	0x0237, r24
	if(x>80 && x<90 && y>85 && y<92 && z<110)	s=1;
 566:	80 91 3b 02 	lds	r24, 0x023B
 56a:	81 55       	subi	r24, 0x51	; 81
 56c:	89 30       	cpi	r24, 0x09	; 9
 56e:	68 f4       	brcc	.+26     	; 0x58a <acc_process+0x9c>
 570:	80 91 45 02 	lds	r24, 0x0245
 574:	86 35       	cpi	r24, 0x56	; 86
 576:	48 f0       	brcs	.+18     	; 0x58a <acc_process+0x9c>
 578:	8c 35       	cpi	r24, 0x5C	; 92
 57a:	38 f4       	brcc	.+14     	; 0x58a <acc_process+0x9c>
 57c:	80 91 42 02 	lds	r24, 0x0242
 580:	8e 36       	cpi	r24, 0x6E	; 110
 582:	18 f4       	brcc	.+6      	; 0x58a <acc_process+0x9c>
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	80 93 36 02 	sts	0x0236, r24
	//acc_call_motion();
	if(r==1)
 58a:	80 91 39 02 	lds	r24, 0x0239
 58e:	81 30       	cpi	r24, 0x01	; 1
 590:	41 f4       	brne	.+16     	; 0x5a2 <acc_process+0xb4>
	{
		lcd_cursor(2,10);
 592:	82 e0       	ldi	r24, 0x02	; 2
 594:	6a e0       	ldi	r22, 0x0A	; 10
 596:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
		lcd_string("right");
 59a:	80 e1       	ldi	r24, 0x10	; 16
 59c:	92 e0       	ldi	r25, 0x02	; 2
 59e:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
	}
	if(l==1)
 5a2:	80 91 3a 02 	lds	r24, 0x023A
 5a6:	81 30       	cpi	r24, 0x01	; 1
 5a8:	41 f4       	brne	.+16     	; 0x5ba <acc_process+0xcc>
	{
		lcd_cursor(2,10);
 5aa:	82 e0       	ldi	r24, 0x02	; 2
 5ac:	6a e0       	ldi	r22, 0x0A	; 10
 5ae:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
		lcd_string("left  ");
 5b2:	86 e1       	ldi	r24, 0x16	; 22
 5b4:	92 e0       	ldi	r25, 0x02	; 2
 5b6:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
	}
	if(b==1)
 5ba:	80 91 38 02 	lds	r24, 0x0238
 5be:	81 30       	cpi	r24, 0x01	; 1
 5c0:	41 f4       	brne	.+16     	; 0x5d2 <acc_process+0xe4>
	{
		lcd_cursor(2,10);
 5c2:	82 e0       	ldi	r24, 0x02	; 2
 5c4:	6a e0       	ldi	r22, 0x0A	; 10
 5c6:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
		lcd_string("back  ");
 5ca:	8d e1       	ldi	r24, 0x1D	; 29
 5cc:	92 e0       	ldi	r25, 0x02	; 2
 5ce:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
	}
	if(f==1)
 5d2:	80 91 37 02 	lds	r24, 0x0237
 5d6:	81 30       	cpi	r24, 0x01	; 1
 5d8:	41 f4       	brne	.+16     	; 0x5ea <acc_process+0xfc>
	{
		lcd_cursor(2,10);
 5da:	82 e0       	ldi	r24, 0x02	; 2
 5dc:	6a e0       	ldi	r22, 0x0A	; 10
 5de:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
		lcd_string("fwd   ");
 5e2:	84 e2       	ldi	r24, 0x24	; 36
 5e4:	92 e0       	ldi	r25, 0x02	; 2
 5e6:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
	}
	if(s==1)
 5ea:	80 91 36 02 	lds	r24, 0x0236
 5ee:	81 30       	cpi	r24, 0x01	; 1
 5f0:	41 f4       	brne	.+16     	; 0x602 <acc_process+0x114>
	{
		lcd_cursor(2,10);
 5f2:	82 e0       	ldi	r24, 0x02	; 2
 5f4:	6a e0       	ldi	r22, 0x0A	; 10
 5f6:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
		lcd_string("steady   ");
 5fa:	8b e2       	ldi	r24, 0x2B	; 43
 5fc:	92 e0       	ldi	r25, 0x02	; 2
 5fe:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
 602:	08 95       	ret

00000604 <acc_init_devices>:

} 

void acc_init_devices()		// this function initializes the lcd and adc I/O ports
{
	cli();
 604:	f8 94       	cli
	port_init();
 606:	0e 94 72 02 	call	0x4e4	; 0x4e4 <port_init>
	lcd_init();
 60a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_init>
	adc_init();				//initializes all the adc channels as input and output.
 60e:	0e 94 07 02 	call	0x40e	; 0x40e <adc_init>
	sei();
 612:	78 94       	sei
}
 614:	08 95       	ret

00000616 <main>:


int main(void)
{
	
	acc_init_devices();
 616:	0e 94 02 03 	call	0x604	; 0x604 <acc_init_devices>
	while(1)
	{

		acc();				// The function is used to extract the adc values of x, y, and Z coordinates
 61a:	0e 94 2f 02 	call	0x45e	; 0x45e <acc>
		acc_process();		// This function actually, compares the obtained values with a threshold and updates necessary flags for further actions to take place
 61e:	0e 94 77 02 	call	0x4ee	; 0x4ee <acc_process>
	
		r=l=f=b=s=0;		// reset all the flags 
 622:	10 92 36 02 	sts	0x0236, r1
 626:	10 92 38 02 	sts	0x0238, r1
 62a:	10 92 37 02 	sts	0x0237, r1
 62e:	10 92 3a 02 	sts	0x023A, r1
 632:	10 92 39 02 	sts	0x0239, r1
 636:	f1 cf       	rjmp	.-30     	; 0x61a <main+0x4>

00000638 <__udivmodhi4>:
 638:	aa 1b       	sub	r26, r26
 63a:	bb 1b       	sub	r27, r27
 63c:	51 e1       	ldi	r21, 0x11	; 17
 63e:	07 c0       	rjmp	.+14     	; 0x64e <__udivmodhi4_ep>

00000640 <__udivmodhi4_loop>:
 640:	aa 1f       	adc	r26, r26
 642:	bb 1f       	adc	r27, r27
 644:	a6 17       	cp	r26, r22
 646:	b7 07       	cpc	r27, r23
 648:	10 f0       	brcs	.+4      	; 0x64e <__udivmodhi4_ep>
 64a:	a6 1b       	sub	r26, r22
 64c:	b7 0b       	sbc	r27, r23

0000064e <__udivmodhi4_ep>:
 64e:	88 1f       	adc	r24, r24
 650:	99 1f       	adc	r25, r25
 652:	5a 95       	dec	r21
 654:	a9 f7       	brne	.-22     	; 0x640 <__udivmodhi4_loop>
 656:	80 95       	com	r24
 658:	90 95       	com	r25
 65a:	bc 01       	movw	r22, r24
 65c:	cd 01       	movw	r24, r26
 65e:	08 95       	ret

00000660 <_exit>:
 660:	f8 94       	cli

00000662 <__stop_program>:
 662:	ff cf       	rjmp	.-2      	; 0x662 <__stop_program>
