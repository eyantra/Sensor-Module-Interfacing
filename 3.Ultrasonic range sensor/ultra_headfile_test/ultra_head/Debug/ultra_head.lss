
ultra_head.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800200  0000058c  00000620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000058c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080021c  0080021c  0000063c  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  0000063c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000da8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c18  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000224  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000569  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  000021f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000238  00000000  00000000  00002334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000031d  00000000  00000000  0000256c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e8       	ldi	r30, 0x8C	; 140
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 31       	cpi	r26, 0x1C	; 28
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	ac e1       	ldi	r26, 0x1C	; 28
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ac 32       	cpi	r26, 0x2C	; 44
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 8b 02 	call	0x516	; 0x516 <main>
 122:	0c 94 c4 02 	jmp	0x588	; 0x588 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	86 e1       	ldi	r24, 0x16	; 22
 12c:	90 e9       	ldi	r25, 0x90	; 144
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_set_4bit+0x4>
 132:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 134:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 136:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 138:	80 e3       	ldi	r24, 0x30	; 48
 13a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 13c:	42 9a       	sbi	0x08, 2	; 8
 13e:	29 e5       	ldi	r18, 0x59	; 89
 140:	30 e4       	ldi	r19, 0x40	; 64
 142:	42 e0       	ldi	r20, 0x02	; 2
 144:	21 50       	subi	r18, 0x01	; 1
 146:	30 40       	sbci	r19, 0x00	; 0
 148:	40 40       	sbci	r20, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <lcd_set_4bit+0x1a>
 14c:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 14e:	42 98       	cbi	0x08, 2	; 8
 150:	a6 e1       	ldi	r26, 0x16	; 22
 152:	b0 e9       	ldi	r27, 0x90	; 144
 154:	11 97       	sbiw	r26, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <lcd_set_4bit+0x2a>
 158:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 15a:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 15c:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 15e:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 160:	42 9a       	sbi	0x08, 2	; 8
 162:	29 e5       	ldi	r18, 0x59	; 89
 164:	30 e4       	ldi	r19, 0x40	; 64
 166:	42 e0       	ldi	r20, 0x02	; 2
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	30 40       	sbci	r19, 0x00	; 0
 16c:	40 40       	sbci	r20, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <lcd_set_4bit+0x3e>
 170:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 172:	42 98       	cbi	0x08, 2	; 8
 174:	a6 e1       	ldi	r26, 0x16	; 22
 176:	b0 e9       	ldi	r27, 0x90	; 144
 178:	11 97       	sbiw	r26, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_set_4bit+0x4e>
 17c:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 17e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 180:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 182:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 184:	42 9a       	sbi	0x08, 2	; 8
 186:	29 e5       	ldi	r18, 0x59	; 89
 188:	30 e4       	ldi	r19, 0x40	; 64
 18a:	42 e0       	ldi	r20, 0x02	; 2
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	30 40       	sbci	r19, 0x00	; 0
 190:	40 40       	sbci	r20, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <lcd_set_4bit+0x62>
 194:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 196:	42 98       	cbi	0x08, 2	; 8
 198:	86 e1       	ldi	r24, 0x16	; 22
 19a:	90 e9       	ldi	r25, 0x90	; 144
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <lcd_set_4bit+0x72>
 1a0:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 1a2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 1a4:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
 1a6:	80 e2       	ldi	r24, 0x20	; 32
 1a8:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 1aa:	42 9a       	sbi	0x08, 2	; 8
 1ac:	29 e5       	ldi	r18, 0x59	; 89
 1ae:	30 e4       	ldi	r19, 0x40	; 64
 1b0:	42 e0       	ldi	r20, 0x02	; 2
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	30 40       	sbci	r19, 0x00	; 0
 1b6:	40 40       	sbci	r20, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <lcd_set_4bit+0x88>
 1ba:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1bc:	42 98       	cbi	0x08, 2	; 8

	
}
 1be:	08 95       	ret

000001c0 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 1c0:	98 b1       	in	r25, 0x08	; 8
 1c2:	9f 70       	andi	r25, 0x0F	; 15
 1c4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 1c6:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 1c8:	28 2f       	mov	r18, r24
 1ca:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 1cc:	92 2b       	or	r25, r18
 1ce:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 1d0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1d2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1d4:	42 9a       	sbi	0x08, 2	; 8
 1d6:	29 e5       	ldi	r18, 0x59	; 89
 1d8:	30 e4       	ldi	r19, 0x40	; 64
 1da:	42 e0       	ldi	r20, 0x02	; 2
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	30 40       	sbci	r19, 0x00	; 0
 1e0:	40 40       	sbci	r20, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <lcd_wr_command+0x1c>
 1e4:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1e6:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 1e8:	98 b1       	in	r25, 0x08	; 8
 1ea:	9f 70       	andi	r25, 0x0F	; 15
 1ec:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 1ee:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 1f0:	82 95       	swap	r24
 1f2:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 1f4:	89 2b       	or	r24, r25
 1f6:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 1f8:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1fa:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1fc:	42 9a       	sbi	0x08, 2	; 8
 1fe:	89 e5       	ldi	r24, 0x59	; 89
 200:	90 e4       	ldi	r25, 0x40	; 64
 202:	a2 e0       	ldi	r26, 0x02	; 2
 204:	81 50       	subi	r24, 0x01	; 1
 206:	90 40       	sbci	r25, 0x00	; 0
 208:	a0 40       	sbci	r26, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <lcd_wr_command+0x44>
 20c:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 20e:	42 98       	cbi	0x08, 2	; 8
}
 210:	08 95       	ret

00000212 <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
 212:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
 216:	86 e1       	ldi	r24, 0x16	; 22
 218:	90 e9       	ldi	r25, 0x90	; 144
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <lcd_init+0x8>
 21e:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 220:	88 e2       	ldi	r24, 0x28	; 40
 222:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_wr_command>
	lcd_wr_command(0x01);
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_wr_command>
	lcd_wr_command(0x06);
 22c:	86 e0       	ldi	r24, 0x06	; 6
 22e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_wr_command>
	lcd_wr_command(0x0E);
 232:	8e e0       	ldi	r24, 0x0E	; 14
 234:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_wr_command>
	lcd_wr_command(0x80);
 238:	80 e8       	ldi	r24, 0x80	; 128
 23a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_wr_command>
		
}
 23e:	08 95       	ret

00000240 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 240:	98 b1       	in	r25, 0x08	; 8
 242:	9f 70       	andi	r25, 0x0F	; 15
 244:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 246:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 248:	28 2f       	mov	r18, r24
 24a:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 24c:	92 2b       	or	r25, r18
 24e:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 250:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 252:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 254:	42 9a       	sbi	0x08, 2	; 8
 256:	29 e5       	ldi	r18, 0x59	; 89
 258:	30 e4       	ldi	r19, 0x40	; 64
 25a:	42 e0       	ldi	r20, 0x02	; 2
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	30 40       	sbci	r19, 0x00	; 0
 260:	40 40       	sbci	r20, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <lcd_wr_char+0x1c>
 264:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 266:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 268:	98 b1       	in	r25, 0x08	; 8
 26a:	9f 70       	andi	r25, 0x0F	; 15
 26c:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 26e:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 270:	82 95       	swap	r24
 272:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 274:	89 2b       	or	r24, r25
 276:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 278:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 27a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 27c:	42 9a       	sbi	0x08, 2	; 8
 27e:	89 e5       	ldi	r24, 0x59	; 89
 280:	90 e4       	ldi	r25, 0x40	; 64
 282:	a2 e0       	ldi	r26, 0x02	; 2
 284:	81 50       	subi	r24, 0x01	; 1
 286:	90 40       	sbci	r25, 0x00	; 0
 288:	a0 40       	sbci	r26, 0x00	; 0
 28a:	e1 f7       	brne	.-8      	; 0x284 <lcd_wr_char+0x44>
 28c:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 28e:	42 98       	cbi	0x08, 2	; 8
}
 290:	08 95       	ret

00000292 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
 292:	80 e8       	ldi	r24, 0x80	; 128
 294:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_wr_command>
}
 298:	08 95       	ret

0000029a <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	ec 01       	movw	r28, r24
	while(*str != '\0')
 2a0:	88 81       	ld	r24, Y
 2a2:	88 23       	and	r24, r24
 2a4:	31 f0       	breq	.+12     	; 0x2b2 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
 2a6:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 2a8:	0e 94 20 01 	call	0x240	; 0x240 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
 2ac:	89 91       	ld	r24, Y+
 2ae:	88 23       	and	r24, r24
 2b0:	d9 f7       	brne	.-10     	; 0x2a8 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	08 95       	ret

000002b8 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
 2b8:	82 30       	cpi	r24, 0x02	; 2
 2ba:	79 f0       	breq	.+30     	; 0x2da <lcd_cursor+0x22>
 2bc:	83 30       	cpi	r24, 0x03	; 3
 2be:	18 f4       	brcc	.+6      	; 0x2c6 <lcd_cursor+0xe>
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	c9 f4       	brne	.+50     	; 0x2f6 <lcd_cursor+0x3e>
 2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <lcd_cursor+0x18>
 2c6:	83 30       	cpi	r24, 0x03	; 3
 2c8:	69 f0       	breq	.+26     	; 0x2e4 <lcd_cursor+0x2c>
 2ca:	84 30       	cpi	r24, 0x04	; 4
 2cc:	a1 f4       	brne	.+40     	; 0x2f6 <lcd_cursor+0x3e>
 2ce:	0f c0       	rjmp	.+30     	; 0x2ee <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 2d0:	86 2f       	mov	r24, r22
 2d2:	81 58       	subi	r24, 0x81	; 129
 2d4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_wr_command>
 2d8:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 2da:	86 2f       	mov	r24, r22
 2dc:	81 54       	subi	r24, 0x41	; 65
 2de:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_wr_command>
 2e2:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 2e4:	86 2f       	mov	r24, r22
 2e6:	8d 56       	subi	r24, 0x6D	; 109
 2e8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_wr_command>
 2ec:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 2ee:	86 2f       	mov	r24, r22
 2f0:	8d 52       	subi	r24, 0x2D	; 45
 2f2:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_wr_command>
 2f6:	08 95       	ret

000002f8 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	8a 01       	movw	r16, r20
 302:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 304:	88 23       	and	r24, r24
 306:	11 f0       	breq	.+4      	; 0x30c <lcd_print+0x14>
 308:	66 23       	and	r22, r22
 30a:	19 f4       	brne	.+6      	; 0x312 <lcd_print+0x1a>
	{
		lcd_home();
 30c:	0e 94 49 01 	call	0x292	; 0x292 <lcd_home>
 310:	02 c0       	rjmp	.+4      	; 0x316 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 312:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 316:	c5 30       	cpi	r28, 0x05	; 5
 318:	d1 05       	cpc	r29, r1
 31a:	71 f4       	brne	.+28     	; 0x338 <lcd_print+0x40>
	{
		million=value/10000+48;
 31c:	c8 01       	movw	r24, r16
 31e:	60 e1       	ldi	r22, 0x10	; 16
 320:	77 e2       	ldi	r23, 0x27	; 39
 322:	0e 94 b0 02 	call	0x560	; 0x560 <__udivmodhi4>
 326:	cb 01       	movw	r24, r22
 328:	c0 96       	adiw	r24, 0x30	; 48
 32a:	90 93 1d 02 	sts	0x021D, r25
 32e:	80 93 1c 02 	sts	0x021C, r24
		lcd_wr_char(million);
 332:	0e 94 20 01 	call	0x240	; 0x240 <lcd_wr_char>
 336:	03 c0       	rjmp	.+6      	; 0x33e <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
 338:	c4 30       	cpi	r28, 0x04	; 4
 33a:	d1 05       	cpc	r29, r1
 33c:	b9 f4       	brne	.+46     	; 0x36c <lcd_print+0x74>
	{
		temp = value/1000;
 33e:	c8 01       	movw	r24, r16
 340:	68 ee       	ldi	r22, 0xE8	; 232
 342:	73 e0       	ldi	r23, 0x03	; 3
 344:	0e 94 b0 02 	call	0x560	; 0x560 <__udivmodhi4>
 348:	cb 01       	movw	r24, r22
 34a:	70 93 20 02 	sts	0x0220, r23
 34e:	60 93 1f 02 	sts	0x021F, r22
		thousand = temp%10 + 48;
 352:	6a e0       	ldi	r22, 0x0A	; 10
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	0e 94 b0 02 	call	0x560	; 0x560 <__udivmodhi4>
 35a:	c0 96       	adiw	r24, 0x30	; 48
 35c:	90 93 2b 02 	sts	0x022B, r25
 360:	80 93 2a 02 	sts	0x022A, r24
		lcd_wr_char(thousand);
 364:	0e 94 20 01 	call	0x240	; 0x240 <lcd_wr_char>
		flag=1;
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	01 c0       	rjmp	.+2      	; 0x36e <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
 36c:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 36e:	c3 30       	cpi	r28, 0x03	; 3
 370:	d1 05       	cpc	r29, r1
 372:	11 f0       	breq	.+4      	; 0x378 <lcd_print+0x80>
 374:	81 30       	cpi	r24, 0x01	; 1
 376:	b1 f4       	brne	.+44     	; 0x3a4 <lcd_print+0xac>
	{
		temp = value/100;
 378:	c8 01       	movw	r24, r16
 37a:	64 e6       	ldi	r22, 0x64	; 100
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	0e 94 b0 02 	call	0x560	; 0x560 <__udivmodhi4>
 382:	cb 01       	movw	r24, r22
 384:	70 93 20 02 	sts	0x0220, r23
 388:	60 93 1f 02 	sts	0x021F, r22
		hundred = temp%10 + 48;
 38c:	6a e0       	ldi	r22, 0x0A	; 10
 38e:	70 e0       	ldi	r23, 0x00	; 0
 390:	0e 94 b0 02 	call	0x560	; 0x560 <__udivmodhi4>
 394:	c0 96       	adiw	r24, 0x30	; 48
 396:	90 93 26 02 	sts	0x0226, r25
 39a:	80 93 25 02 	sts	0x0225, r24
		lcd_wr_char(hundred);
 39e:	0e 94 20 01 	call	0x240	; 0x240 <lcd_wr_char>
		flag=1;
 3a2:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
 3a4:	c2 30       	cpi	r28, 0x02	; 2
 3a6:	d1 05       	cpc	r29, r1
 3a8:	11 f0       	breq	.+4      	; 0x3ae <lcd_print+0xb6>
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	b1 f4       	brne	.+44     	; 0x3da <lcd_print+0xe2>
	{
		temp = value/10;
 3ae:	2a e0       	ldi	r18, 0x0A	; 10
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	c8 01       	movw	r24, r16
 3b4:	b9 01       	movw	r22, r18
 3b6:	0e 94 b0 02 	call	0x560	; 0x560 <__udivmodhi4>
 3ba:	cb 01       	movw	r24, r22
 3bc:	70 93 20 02 	sts	0x0220, r23
 3c0:	60 93 1f 02 	sts	0x021F, r22
		tens = temp%10 + 48;
 3c4:	b9 01       	movw	r22, r18
 3c6:	0e 94 b0 02 	call	0x560	; 0x560 <__udivmodhi4>
 3ca:	c0 96       	adiw	r24, 0x30	; 48
 3cc:	90 93 24 02 	sts	0x0224, r25
 3d0:	80 93 23 02 	sts	0x0223, r24
		lcd_wr_char(tens);
 3d4:	0e 94 20 01 	call	0x240	; 0x240 <lcd_wr_char>
		flag=1;
 3d8:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
 3da:	c1 30       	cpi	r28, 0x01	; 1
 3dc:	d1 05       	cpc	r29, r1
 3de:	11 f0       	breq	.+4      	; 0x3e4 <lcd_print+0xec>
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	61 f4       	brne	.+24     	; 0x3fc <lcd_print+0x104>
	{
		unit = value%10 + 48;
 3e4:	c8 01       	movw	r24, r16
 3e6:	6a e0       	ldi	r22, 0x0A	; 10
 3e8:	70 e0       	ldi	r23, 0x00	; 0
 3ea:	0e 94 b0 02 	call	0x560	; 0x560 <__udivmodhi4>
 3ee:	c0 96       	adiw	r24, 0x30	; 48
 3f0:	90 93 29 02 	sts	0x0229, r25
 3f4:	80 93 28 02 	sts	0x0228, r24
		lcd_wr_char(unit);
 3f8:	0e 94 20 01 	call	0x240	; 0x240 <lcd_wr_char>
	}
	if(digits>5)
 3fc:	c6 30       	cpi	r28, 0x06	; 6
 3fe:	d1 05       	cpc	r29, r1
 400:	1c f0       	brlt	.+6      	; 0x408 <lcd_print+0x110>
	{
		lcd_wr_char('E');
 402:	85 e4       	ldi	r24, 0x45	; 69
 404:	0e 94 20 01 	call	0x240	; 0x240 <lcd_wr_char>
	}
	
}
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	08 95       	ret

00000412 <lcd_port_config>:
unsigned char ADC_Value;
unsigned char sharp, distance, adc_reading;

void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
 412:	87 b1       	in	r24, 0x07	; 7
 414:	87 6f       	ori	r24, 0xF7	; 247
 416:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
 418:	88 b1       	in	r24, 0x08	; 8
 41a:	80 78       	andi	r24, 0x80	; 128
 41c:	88 b9       	out	0x08, r24	; 8
}
 41e:	08 95       	ret

00000420 <adc_pin_config>:
void adc_pin_config (void)
{
	DDRF = 0x00; //set PORTF direction as input
 420:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00; //set PORTF pins floating
 422:	11 ba       	out	0x11, r1	; 17
	DDRK = 0x00; //set PORTK direction as input
 424:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0x00; //set PORTK pins floating
 428:	10 92 08 01 	sts	0x0108, r1
}
 42c:	08 95       	ret

0000042e <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
 42e:	ea e7       	ldi	r30, 0x7A	; 122
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
 434:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 438:	80 e2       	ldi	r24, 0x20	; 32
 43a:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
 43e:	80 e8       	ldi	r24, 0x80	; 128
 440:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 442:	86 e8       	ldi	r24, 0x86	; 134
 444:	80 83       	st	Z, r24
}
 446:	08 95       	ret

00000448 <ADC_Conversion>:

unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a = 0,b = 0;
	
	if(Ch>7)
 448:	88 30       	cpi	r24, 0x08	; 8
 44a:	18 f0       	brcs	.+6      	; 0x452 <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
 44c:	98 e0       	ldi	r25, 0x08	; 8
 44e:	90 93 7b 00 	sts	0x007B, r25
	}

	Ch = Ch & 0x07;
 452:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;
 454:	80 62       	ori	r24, 0x20	; 32
 456:	80 93 7c 00 	sts	0x007C, r24
 45a:	8f e7       	ldi	r24, 0x7F	; 127
 45c:	9a e8       	ldi	r25, 0x8A	; 138
 45e:	a3 e4       	ldi	r26, 0x43	; 67
 460:	81 50       	subi	r24, 0x01	; 1
 462:	90 40       	sbci	r25, 0x00	; 0
 464:	a0 40       	sbci	r26, 0x00	; 0
 466:	e1 f7       	brne	.-8      	; 0x460 <ADC_Conversion+0x18>
 468:	00 c0       	rjmp	.+0      	; 0x46a <ADC_Conversion+0x22>
 46a:	00 00       	nop
	_delay_ms(150);
	ADCSRA = ADCSRA | 0x40;	    //Set start conversion bit
 46c:	ea e7       	ldi	r30, 0x7A	; 122
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	80 64       	ori	r24, 0x40	; 64
 474:	80 83       	st	Z, r24
 476:	8f e7       	ldi	r24, 0x7F	; 127
 478:	9a e8       	ldi	r25, 0x8A	; 138
 47a:	a3 e4       	ldi	r26, 0x43	; 67
 47c:	81 50       	subi	r24, 0x01	; 1
 47e:	90 40       	sbci	r25, 0x00	; 0
 480:	a0 40       	sbci	r26, 0x00	; 0
 482:	e1 f7       	brne	.-8      	; 0x47c <ADC_Conversion+0x34>
 484:	00 c0       	rjmp	.+0      	; 0x486 <ADC_Conversion+0x3e>
 486:	00 00       	nop
	_delay_ms(150);
	while((ADCSRA&0x10)==0);	    //Wait for ADC conversion to complete
 488:	80 81       	ld	r24, Z
 48a:	84 ff       	sbrs	r24, 4
 48c:	fd cf       	rjmp	.-6      	; 0x488 <ADC_Conversion+0x40>
	b = (ADCL>>6);   //read & adjust ADCL result to read as a right adjusted result
 48e:	80 91 78 00 	lds	r24, 0x0078
	a = (ADCH<<2);   //read & adjust ADCH result to read as a right adjusted result
 492:	90 91 79 00 	lds	r25, 0x0079
 496:	99 0f       	add	r25, r25
 498:	99 0f       	add	r25, r25
	a = a | b;
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 49a:	ea e7       	ldi	r30, 0x7A	; 122
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	20 81       	ld	r18, Z
 4a0:	20 61       	ori	r18, 0x10	; 16
 4a2:	20 83       	st	Z, r18
	ADCSRB = 0x00;
 4a4:	10 92 7b 00 	sts	0x007B, r1
	ADMUX= 0x20| Ch;
	_delay_ms(150);
	ADCSRA = ADCSRA | 0x40;	    //Set start conversion bit
	_delay_ms(150);
	while((ADCSRA&0x10)==0);	    //Wait for ADC conversion to complete
	b = (ADCL>>6);   //read & adjust ADCL result to read as a right adjusted result
 4a8:	82 95       	swap	r24
 4aa:	86 95       	lsr	r24
 4ac:	86 95       	lsr	r24
 4ae:	83 70       	andi	r24, 0x03	; 3
	a = (ADCH<<2);   //read & adjust ADCH result to read as a right adjusted result
	a = a | b;
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
	ADCSRB = 0x00;
	return a;
}
 4b0:	89 2b       	or	r24, r25
 4b2:	08 95       	ret

000004b4 <ultra>:


void ultra(void)
{
	unsigned int sr;
	distance = ADC_Conversion(11);		//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
 4b4:	8b e0       	ldi	r24, 0x0B	; 11
 4b6:	0e 94 24 02 	call	0x448	; 0x448 <ADC_Conversion>
 4ba:	80 93 21 02 	sts	0x0221, r24
	lcd_string("    E Yantra");
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	92 e0       	ldi	r25, 0x02	; 2
 4c2:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_string>
		lcd_cursor(2,1);
 4c6:	82 e0       	ldi	r24, 0x02	; 2
 4c8:	61 e0       	ldi	r22, 0x01	; 1
 4ca:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_cursor>
		lcd_string("Distance= ");			
 4ce:	8d e0       	ldi	r24, 0x0D	; 13
 4d0:	92 e0       	ldi	r25, 0x02	; 2
 4d2:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_string>
		lcd_print(2,10,distance,3);
 4d6:	40 91 21 02 	lds	r20, 0x0221
 4da:	82 e0       	ldi	r24, 0x02	; 2
 4dc:	6a e0       	ldi	r22, 0x0A	; 10
 4de:	50 e0       	ldi	r21, 0x00	; 0
 4e0:	23 e0       	ldi	r18, 0x03	; 3
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_print>
		lcd_string(" cm");
 4e8:	88 e1       	ldi	r24, 0x18	; 24
 4ea:	92 e0       	ldi	r25, 0x02	; 2
 4ec:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_string>
}
 4f0:	08 95       	ret

000004f2 <port_init>:


void port_init()
{
	
	lcd_port_config();
 4f2:	0e 94 09 02 	call	0x412	; 0x412 <lcd_port_config>
	adc_pin_config();
 4f6:	0e 94 10 02 	call	0x420	; 0x420 <adc_pin_config>
}
 4fa:	08 95       	ret

000004fc <us_init_devices>:

void us_init_devices()
{
	cli();
 4fc:	f8 94       	cli
	port_init();  
 4fe:	0e 94 79 02 	call	0x4f2	; 0x4f2 <port_init>
	lcd_init();
 502:	0e 94 09 01 	call	0x212	; 0x212 <lcd_init>
	adc_init();
 506:	0e 94 17 02 	call	0x42e	; 0x42e <adc_init>
	sei();  
 50a:	78 94       	sei
}
 50c:	08 95       	ret

0000050e <us_return>:
unsigned int us_return(void)
{
	return distance;
}
 50e:	80 91 21 02 	lds	r24, 0x0221
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	08 95       	ret

00000516 <main>:
#include "lcd.h"
#include "ultrasonic.h"

int main(void)
{
	us_init_devices();
 516:	0e 94 7e 02 	call	0x4fc	; 0x4fc <us_init_devices>
 51a:	8f e7       	ldi	r24, 0x7F	; 127
 51c:	9a e8       	ldi	r25, 0x8A	; 138
 51e:	a3 e4       	ldi	r26, 0x43	; 67
 520:	81 50       	subi	r24, 0x01	; 1
 522:	90 40       	sbci	r25, 0x00	; 0
 524:	a0 40       	sbci	r26, 0x00	; 0
 526:	e1 f7       	brne	.-8      	; 0x520 <main+0xa>
 528:	00 c0       	rjmp	.+0      	; 0x52a <main+0x14>
 52a:	00 00       	nop
	unsigned char d;
    while(1)
    {
		
			_delay_ms(150);
     ultra();
 52c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <ultra>
 530:	8f e7       	ldi	r24, 0x7F	; 127
 532:	9a e8       	ldi	r25, 0x8A	; 138
 534:	a3 e4       	ldi	r26, 0x43	; 67
 536:	81 50       	subi	r24, 0x01	; 1
 538:	90 40       	sbci	r25, 0x00	; 0
 53a:	a0 40       	sbci	r26, 0x00	; 0
 53c:	e1 f7       	brne	.-8      	; 0x536 <main+0x20>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <main+0x2a>
 540:	00 00       	nop
	 	_delay_ms(150);   //TODO:: Please write your application code 
    d=us_return();
 542:	0e 94 87 02 	call	0x50e	; 0x50e <us_return>
 546:	c8 2f       	mov	r28, r24
lcd_wr_command(0x01);
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_wr_command>
	lcd_print(1,1,d,3);
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	61 e0       	ldi	r22, 0x01	; 1
 552:	4c 2f       	mov	r20, r28
 554:	50 e0       	ldi	r21, 0x00	; 0
 556:	23 e0       	ldi	r18, 0x03	; 3
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <lcd_print>
 55e:	dd cf       	rjmp	.-70     	; 0x51a <main+0x4>

00000560 <__udivmodhi4>:
 560:	aa 1b       	sub	r26, r26
 562:	bb 1b       	sub	r27, r27
 564:	51 e1       	ldi	r21, 0x11	; 17
 566:	07 c0       	rjmp	.+14     	; 0x576 <__udivmodhi4_ep>

00000568 <__udivmodhi4_loop>:
 568:	aa 1f       	adc	r26, r26
 56a:	bb 1f       	adc	r27, r27
 56c:	a6 17       	cp	r26, r22
 56e:	b7 07       	cpc	r27, r23
 570:	10 f0       	brcs	.+4      	; 0x576 <__udivmodhi4_ep>
 572:	a6 1b       	sub	r26, r22
 574:	b7 0b       	sbc	r27, r23

00000576 <__udivmodhi4_ep>:
 576:	88 1f       	adc	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	5a 95       	dec	r21
 57c:	a9 f7       	brne	.-22     	; 0x568 <__udivmodhi4_loop>
 57e:	80 95       	com	r24
 580:	90 95       	com	r25
 582:	bc 01       	movw	r22, r24
 584:	cd 01       	movw	r24, r26
 586:	08 95       	ret

00000588 <_exit>:
 588:	f8 94       	cli

0000058a <__stop_program>:
 58a:	ff cf       	rjmp	.-2      	; 0x58a <__stop_program>
