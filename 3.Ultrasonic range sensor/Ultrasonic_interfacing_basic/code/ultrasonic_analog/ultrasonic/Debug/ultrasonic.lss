
ultrasonic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800200  00000594  00000628  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000594  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080021c  0080021c  00000644  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000db0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca7  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000022d  00000000  00000000  00001af7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000056b  00000000  00000000  00001d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00002290  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000025a  00000000  00000000  000023e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000345  00000000  00000000  0000263e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e9       	ldi	r30, 0x94	; 148
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 31       	cpi	r26, 0x1C	; 28
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	ac e1       	ldi	r26, 0x1C	; 28
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	af 32       	cpi	r26, 0x2F	; 47
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 8a 02 	call	0x514	; 0x514 <main>
 122:	0c 94 c8 02 	jmp	0x590	; 0x590 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	86 e6       	ldi	r24, 0x66	; 102
 12c:	9e e0       	ldi	r25, 0x0E	; 14
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_set_4bit+0x4>
 132:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 134:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 136:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 138:	80 e3       	ldi	r24, 0x30	; 48
 13a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 13c:	42 9a       	sbi	0x08, 2	; 8
 13e:	ef ef       	ldi	r30, 0xFF	; 255
 140:	f7 e4       	ldi	r31, 0x47	; 71
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_set_4bit+0x18>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_set_4bit+0x1e>
 148:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 14a:	42 98       	cbi	0x08, 2	; 8
 14c:	e6 e6       	ldi	r30, 0x66	; 102
 14e:	fe e0       	ldi	r31, 0x0E	; 14
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_set_4bit+0x26>
 154:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 156:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 158:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 15a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 15c:	42 9a       	sbi	0x08, 2	; 8
 15e:	ef ef       	ldi	r30, 0xFF	; 255
 160:	f7 e4       	ldi	r31, 0x47	; 71
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x38>
 166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x3e>
 168:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 16a:	42 98       	cbi	0x08, 2	; 8
 16c:	e6 e6       	ldi	r30, 0x66	; 102
 16e:	fe e0       	ldi	r31, 0x0E	; 14
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x46>
 174:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 176:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 178:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 17a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 17c:	42 9a       	sbi	0x08, 2	; 8
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	97 e4       	ldi	r25, 0x47	; 71
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_set_4bit+0x58>
 186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_set_4bit+0x5e>
 188:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 18a:	42 98       	cbi	0x08, 2	; 8
 18c:	e6 e6       	ldi	r30, 0x66	; 102
 18e:	fe e0       	ldi	r31, 0x0E	; 14
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_set_4bit+0x66>
 194:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 196:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 198:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
 19a:	80 e2       	ldi	r24, 0x20	; 32
 19c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 19e:	42 9a       	sbi	0x08, 2	; 8
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	97 e4       	ldi	r25, 0x47	; 71
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_set_4bit+0x7a>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_set_4bit+0x80>
 1aa:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1ac:	42 98       	cbi	0x08, 2	; 8

	
}
 1ae:	08 95       	ret

000001b0 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 1b0:	98 b1       	in	r25, 0x08	; 8
 1b2:	9f 70       	andi	r25, 0x0F	; 15
 1b4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 1b6:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 1b8:	28 2f       	mov	r18, r24
 1ba:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 1bc:	92 2b       	or	r25, r18
 1be:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 1c0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1c2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1c4:	42 9a       	sbi	0x08, 2	; 8
 1c6:	ef ef       	ldi	r30, 0xFF	; 255
 1c8:	f7 e4       	ldi	r31, 0x47	; 71
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_wr_command+0x1a>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_wr_command+0x20>
 1d0:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1d2:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 1d4:	98 b1       	in	r25, 0x08	; 8
 1d6:	9f 70       	andi	r25, 0x0F	; 15
 1d8:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 1da:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 1dc:	82 95       	swap	r24
 1de:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 1e0:	89 2b       	or	r24, r25
 1e2:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 1e4:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1e6:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1e8:	42 9a       	sbi	0x08, 2	; 8
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	97 e4       	ldi	r25, 0x47	; 71
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_wr_command+0x3e>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_wr_command+0x44>
 1f4:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1f6:	42 98       	cbi	0x08, 2	; 8
}
 1f8:	08 95       	ret

000001fa <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
 1fa:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
 1fe:	86 e6       	ldi	r24, 0x66	; 102
 200:	9e e0       	ldi	r25, 0x0E	; 14
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x8>
 206:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 208:	88 e2       	ldi	r24, 0x28	; 40
 20a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x01);
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x06);
 214:	86 e0       	ldi	r24, 0x06	; 6
 216:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x0E);
 21a:	8e e0       	ldi	r24, 0x0E	; 14
 21c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x80);
 220:	80 e8       	ldi	r24, 0x80	; 128
 222:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
		
}
 226:	08 95       	ret

00000228 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 228:	98 b1       	in	r25, 0x08	; 8
 22a:	9f 70       	andi	r25, 0x0F	; 15
 22c:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 22e:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 230:	28 2f       	mov	r18, r24
 232:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 234:	92 2b       	or	r25, r18
 236:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 238:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 23a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 23c:	42 9a       	sbi	0x08, 2	; 8
 23e:	ef ef       	ldi	r30, 0xFF	; 255
 240:	f7 e4       	ldi	r31, 0x47	; 71
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_wr_char+0x1a>
 246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_wr_char+0x20>
 248:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 24a:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 24c:	98 b1       	in	r25, 0x08	; 8
 24e:	9f 70       	andi	r25, 0x0F	; 15
 250:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 252:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 254:	82 95       	swap	r24
 256:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 258:	89 2b       	or	r24, r25
 25a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 25c:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 25e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 260:	42 9a       	sbi	0x08, 2	; 8
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	97 e4       	ldi	r25, 0x47	; 71
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <lcd_wr_char+0x3e>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <lcd_wr_char+0x44>
 26c:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 26e:	42 98       	cbi	0x08, 2	; 8
}
 270:	08 95       	ret

00000272 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
 272:	80 e8       	ldi	r24, 0x80	; 128
 274:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
}
 278:	08 95       	ret

0000027a <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	ec 01       	movw	r28, r24
	while(*str != '\0')
 280:	88 81       	ld	r24, Y
 282:	88 23       	and	r24, r24
 284:	31 f0       	breq	.+12     	; 0x292 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
 286:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 288:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
 28c:	89 91       	ld	r24, Y+
 28e:	88 23       	and	r24, r24
 290:	d9 f7       	brne	.-10     	; 0x288 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	79 f0       	breq	.+30     	; 0x2ba <lcd_cursor+0x22>
 29c:	83 30       	cpi	r24, 0x03	; 3
 29e:	18 f4       	brcc	.+6      	; 0x2a6 <lcd_cursor+0xe>
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	c9 f4       	brne	.+50     	; 0x2d6 <lcd_cursor+0x3e>
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <lcd_cursor+0x18>
 2a6:	83 30       	cpi	r24, 0x03	; 3
 2a8:	69 f0       	breq	.+26     	; 0x2c4 <lcd_cursor+0x2c>
 2aa:	84 30       	cpi	r24, 0x04	; 4
 2ac:	a1 f4       	brne	.+40     	; 0x2d6 <lcd_cursor+0x3e>
 2ae:	0f c0       	rjmp	.+30     	; 0x2ce <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 2b0:	86 2f       	mov	r24, r22
 2b2:	81 58       	subi	r24, 0x81	; 129
 2b4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2b8:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 2ba:	86 2f       	mov	r24, r22
 2bc:	81 54       	subi	r24, 0x41	; 65
 2be:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2c2:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 2c4:	86 2f       	mov	r24, r22
 2c6:	8d 56       	subi	r24, 0x6D	; 109
 2c8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2cc:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 2ce:	86 2f       	mov	r24, r22
 2d0:	8d 52       	subi	r24, 0x2D	; 45
 2d2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2d6:	08 95       	ret

000002d8 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	8a 01       	movw	r16, r20
 2e2:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 2e4:	88 23       	and	r24, r24
 2e6:	11 f0       	breq	.+4      	; 0x2ec <lcd_print+0x14>
 2e8:	66 23       	and	r22, r22
 2ea:	19 f4       	brne	.+6      	; 0x2f2 <lcd_print+0x1a>
	{
		lcd_home();
 2ec:	0e 94 39 01 	call	0x272	; 0x272 <lcd_home>
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 2f2:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 2f6:	c5 30       	cpi	r28, 0x05	; 5
 2f8:	d1 05       	cpc	r29, r1
 2fa:	71 f4       	brne	.+28     	; 0x318 <lcd_print+0x40>
	{
		million=value/10000+48;
 2fc:	c8 01       	movw	r24, r16
 2fe:	60 e1       	ldi	r22, 0x10	; 16
 300:	77 e2       	ldi	r23, 0x27	; 39
 302:	0e 94 b4 02 	call	0x568	; 0x568 <__udivmodhi4>
 306:	cb 01       	movw	r24, r22
 308:	c0 96       	adiw	r24, 0x30	; 48
 30a:	90 93 1d 02 	sts	0x021D, r25
 30e:	80 93 1c 02 	sts	0x021C, r24
		lcd_wr_char(million);
 312:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
 316:	03 c0       	rjmp	.+6      	; 0x31e <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
 318:	c4 30       	cpi	r28, 0x04	; 4
 31a:	d1 05       	cpc	r29, r1
 31c:	b9 f4       	brne	.+46     	; 0x34c <lcd_print+0x74>
	{
		temp = value/1000;
 31e:	c8 01       	movw	r24, r16
 320:	68 ee       	ldi	r22, 0xE8	; 232
 322:	73 e0       	ldi	r23, 0x03	; 3
 324:	0e 94 b4 02 	call	0x568	; 0x568 <__udivmodhi4>
 328:	cb 01       	movw	r24, r22
 32a:	70 93 21 02 	sts	0x0221, r23
 32e:	60 93 20 02 	sts	0x0220, r22
		thousand = temp%10 + 48;
 332:	6a e0       	ldi	r22, 0x0A	; 10
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	0e 94 b4 02 	call	0x568	; 0x568 <__udivmodhi4>
 33a:	c0 96       	adiw	r24, 0x30	; 48
 33c:	90 93 2e 02 	sts	0x022E, r25
 340:	80 93 2d 02 	sts	0x022D, r24
		lcd_wr_char(thousand);
 344:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	01 c0       	rjmp	.+2      	; 0x34e <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
 34c:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 34e:	c3 30       	cpi	r28, 0x03	; 3
 350:	d1 05       	cpc	r29, r1
 352:	11 f0       	breq	.+4      	; 0x358 <lcd_print+0x80>
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	b1 f4       	brne	.+44     	; 0x384 <lcd_print+0xac>
	{
		temp = value/100;
 358:	c8 01       	movw	r24, r16
 35a:	64 e6       	ldi	r22, 0x64	; 100
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	0e 94 b4 02 	call	0x568	; 0x568 <__udivmodhi4>
 362:	cb 01       	movw	r24, r22
 364:	70 93 21 02 	sts	0x0221, r23
 368:	60 93 20 02 	sts	0x0220, r22
		hundred = temp%10 + 48;
 36c:	6a e0       	ldi	r22, 0x0A	; 10
 36e:	70 e0       	ldi	r23, 0x00	; 0
 370:	0e 94 b4 02 	call	0x568	; 0x568 <__udivmodhi4>
 374:	c0 96       	adiw	r24, 0x30	; 48
 376:	90 93 28 02 	sts	0x0228, r25
 37a:	80 93 27 02 	sts	0x0227, r24
		lcd_wr_char(hundred);
 37e:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
 382:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
 384:	c2 30       	cpi	r28, 0x02	; 2
 386:	d1 05       	cpc	r29, r1
 388:	11 f0       	breq	.+4      	; 0x38e <lcd_print+0xb6>
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	b1 f4       	brne	.+44     	; 0x3ba <lcd_print+0xe2>
	{
		temp = value/10;
 38e:	2a e0       	ldi	r18, 0x0A	; 10
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	c8 01       	movw	r24, r16
 394:	b9 01       	movw	r22, r18
 396:	0e 94 b4 02 	call	0x568	; 0x568 <__udivmodhi4>
 39a:	cb 01       	movw	r24, r22
 39c:	70 93 21 02 	sts	0x0221, r23
 3a0:	60 93 20 02 	sts	0x0220, r22
		tens = temp%10 + 48;
 3a4:	b9 01       	movw	r22, r18
 3a6:	0e 94 b4 02 	call	0x568	; 0x568 <__udivmodhi4>
 3aa:	c0 96       	adiw	r24, 0x30	; 48
 3ac:	90 93 26 02 	sts	0x0226, r25
 3b0:	80 93 25 02 	sts	0x0225, r24
		lcd_wr_char(tens);
 3b4:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
 3ba:	c1 30       	cpi	r28, 0x01	; 1
 3bc:	d1 05       	cpc	r29, r1
 3be:	11 f0       	breq	.+4      	; 0x3c4 <lcd_print+0xec>
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	61 f4       	brne	.+24     	; 0x3dc <lcd_print+0x104>
	{
		unit = value%10 + 48;
 3c4:	c8 01       	movw	r24, r16
 3c6:	6a e0       	ldi	r22, 0x0A	; 10
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	0e 94 b4 02 	call	0x568	; 0x568 <__udivmodhi4>
 3ce:	c0 96       	adiw	r24, 0x30	; 48
 3d0:	90 93 2c 02 	sts	0x022C, r25
 3d4:	80 93 2b 02 	sts	0x022B, r24
		lcd_wr_char(unit);
 3d8:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
	}
	if(digits>5)
 3dc:	c6 30       	cpi	r28, 0x06	; 6
 3de:	d1 05       	cpc	r29, r1
 3e0:	1c f0       	brlt	.+6      	; 0x3e8 <lcd_print+0x110>
	{
		lcd_wr_char('E');
 3e2:	85 e4       	ldi	r24, 0x45	; 69
 3e4:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
	}
	
}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	0f 91       	pop	r16
 3f0:	08 95       	ret

000003f2 <lcd_port_config>:
unsigned char ADC_Value;
unsigned int sharp, distance, adc_reading;

void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
 3f2:	87 b1       	in	r24, 0x07	; 7
 3f4:	87 6f       	ori	r24, 0xF7	; 247
 3f6:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
 3f8:	88 b1       	in	r24, 0x08	; 8
 3fa:	80 78       	andi	r24, 0x80	; 128
 3fc:	88 b9       	out	0x08, r24	; 8
}
 3fe:	08 95       	ret

00000400 <ultrsonic_trigger_config>:

void ultrsonic_trigger_config(void)
{
	DDRB = DDRB | 0x10;   // PB4 direction set as output
 400:	24 9a       	sbi	0x04, 4	; 4
	PORTB = PORTB & 0x00; // PB4 set to logic 0
 402:	85 b1       	in	r24, 0x05	; 5
 404:	15 b8       	out	0x05, r1	; 5
}
 406:	08 95       	ret

00000408 <adc_pin_config>:

void adc_pin_config (void)
{
	DDRF = 0x00; //set PORTF direction as input
 408:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00; //set PORTF pins floating
 40a:	11 ba       	out	0x11, r1	; 17
	DDRK = 0x00; //set PORTK direction as input
 40c:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0x00; //set PORTK pins floating
 410:	10 92 08 01 	sts	0x0108, r1
}
 414:	08 95       	ret

00000416 <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
 416:	ea e7       	ldi	r30, 0x7A	; 122
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
 41c:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 420:	80 e2       	ldi	r24, 0x20	; 32
 422:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
 426:	80 e8       	ldi	r24, 0x80	; 128
 428:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 42a:	86 e8       	ldi	r24, 0x86	; 134
 42c:	80 83       	st	Z, r24
}
 42e:	08 95       	ret

00000430 <ADC_Conversion>:

unsigned int ADC_Conversion(unsigned char Ch)
{
	unsigned int a = 0,b = 0;
	
	if(Ch>7)
 430:	88 30       	cpi	r24, 0x08	; 8
 432:	18 f0       	brcs	.+6      	; 0x43a <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
 434:	98 e0       	ldi	r25, 0x08	; 8
 436:	90 93 7b 00 	sts	0x007B, r25
	}

	Ch = Ch & 0x07;
 43a:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;
 43c:	80 62       	ori	r24, 0x20	; 32
 43e:	80 93 7c 00 	sts	0x007C, r24
 442:	8f ef       	ldi	r24, 0xFF	; 255
 444:	9f eb       	ldi	r25, 0xBF	; 191
 446:	a6 e0       	ldi	r26, 0x06	; 6
 448:	81 50       	subi	r24, 0x01	; 1
 44a:	90 40       	sbci	r25, 0x00	; 0
 44c:	a0 40       	sbci	r26, 0x00	; 0
 44e:	e1 f7       	brne	.-8      	; 0x448 <ADC_Conversion+0x18>
 450:	00 c0       	rjmp	.+0      	; 0x452 <ADC_Conversion+0x22>
 452:	00 00       	nop
	_delay_ms(150);
	ADCSRA = ADCSRA | 0x40;	    //Set start conversion bit
 454:	ea e7       	ldi	r30, 0x7A	; 122
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	80 81       	ld	r24, Z
 45a:	80 64       	ori	r24, 0x40	; 64
 45c:	80 83       	st	Z, r24
 45e:	8f ef       	ldi	r24, 0xFF	; 255
 460:	9f eb       	ldi	r25, 0xBF	; 191
 462:	a6 e0       	ldi	r26, 0x06	; 6
 464:	81 50       	subi	r24, 0x01	; 1
 466:	90 40       	sbci	r25, 0x00	; 0
 468:	a0 40       	sbci	r26, 0x00	; 0
 46a:	e1 f7       	brne	.-8      	; 0x464 <ADC_Conversion+0x34>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <ADC_Conversion+0x3e>
 46e:	00 00       	nop
	_delay_ms(150);
	while((ADCSRA&0x10)==0);	    //Wait for ADC conversion to complete
 470:	80 81       	ld	r24, Z
 472:	84 ff       	sbrs	r24, 4
 474:	fd cf       	rjmp	.-6      	; 0x470 <ADC_Conversion+0x40>
	b = (ADCL>>6);   //read & adjust ADCL result to read as a right adjusted result
 476:	20 91 78 00 	lds	r18, 0x0078
	a = (ADCH<<2);   //read & adjust ADCH result to read as a right adjusted result
 47a:	80 91 79 00 	lds	r24, 0x0079
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
	a = a | b;
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 488:	ea e7       	ldi	r30, 0x7A	; 122
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	30 81       	ld	r19, Z
 48e:	30 61       	ori	r19, 0x10	; 16
 490:	30 83       	st	Z, r19
	ADCSRB = 0x00;
 492:	10 92 7b 00 	sts	0x007B, r1
	ADMUX= 0x20| Ch;
	_delay_ms(150);
	ADCSRA = ADCSRA | 0x40;	    //Set start conversion bit
	_delay_ms(150);
	while((ADCSRA&0x10)==0);	    //Wait for ADC conversion to complete
	b = (ADCL>>6);   //read & adjust ADCL result to read as a right adjusted result
 496:	22 95       	swap	r18
 498:	26 95       	lsr	r18
 49a:	26 95       	lsr	r18
 49c:	23 70       	andi	r18, 0x03	; 3
 49e:	30 e0       	ldi	r19, 0x00	; 0
	a = (ADCH<<2);   //read & adjust ADCH result to read as a right adjusted result
	a = a | b;
 4a0:	82 2b       	or	r24, r18
 4a2:	93 2b       	or	r25, r19
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
	ADCSRB = 0x00;
	return a;
}
 4a4:	08 95       	ret

000004a6 <ultra>:


void ultra(void)
{
	
	distance = ADC_Conversion(14);		//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
 4a6:	8e e0       	ldi	r24, 0x0E	; 14
 4a8:	0e 94 18 02 	call	0x430	; 0x430 <ADC_Conversion>
 4ac:	90 93 23 02 	sts	0x0223, r25
 4b0:	80 93 22 02 	sts	0x0222, r24
	lcd_string("    E Yantra");
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	92 e0       	ldi	r25, 0x02	; 2
 4b8:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
		lcd_cursor(2,1);
 4bc:	82 e0       	ldi	r24, 0x02	; 2
 4be:	61 e0       	ldi	r22, 0x01	; 1
 4c0:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
		lcd_string("Distance= ");			
 4c4:	8d e0       	ldi	r24, 0x0D	; 13
 4c6:	92 e0       	ldi	r25, 0x02	; 2
 4c8:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
		lcd_print(2,10,distance,3);
 4cc:	40 91 22 02 	lds	r20, 0x0222
 4d0:	50 91 23 02 	lds	r21, 0x0223
 4d4:	82 e0       	ldi	r24, 0x02	; 2
 4d6:	6a e0       	ldi	r22, 0x0A	; 10
 4d8:	23 e0       	ldi	r18, 0x03	; 3
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
		lcd_string(" cm");
 4e0:	88 e1       	ldi	r24, 0x18	; 24
 4e2:	92 e0       	ldi	r25, 0x02	; 2
 4e4:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
}
 4e8:	08 95       	ret

000004ea <port_init>:


void port_init()
{
	
	lcd_port_config();
 4ea:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <lcd_port_config>
	adc_pin_config();
 4ee:	0e 94 04 02 	call	0x408	; 0x408 <adc_pin_config>
}
 4f2:	08 95       	ret

000004f4 <us_init_devices>:

void us_init_devices()
{
	cli();
 4f4:	f8 94       	cli
	port_init();  
 4f6:	0e 94 75 02 	call	0x4ea	; 0x4ea <port_init>
	lcd_init();
 4fa:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_init>
	adc_init();
 4fe:	0e 94 0b 02 	call	0x416	; 0x416 <adc_init>
	ultrsonic_trigger_config();
 502:	0e 94 00 02 	call	0x400	; 0x400 <ultrsonic_trigger_config>
	sei();  
 506:	78 94       	sei
}
 508:	08 95       	ret

0000050a <us_return>:


unsigned int us_return(void)
{
	return distance;
}
 50a:	80 91 22 02 	lds	r24, 0x0222
 50e:	90 91 23 02 	lds	r25, 0x0223
 512:	08 95       	ret

00000514 <main>:


int main(void)
{
	unsigned int i,dist;
	us_init_devices();
 514:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <us_init_devices>
	while(1)
	{

		PORTB = PORTB | 0x10;  // make high the Trigger input for Ultrasonic sensor
 518:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 51a:	86 ef       	ldi	r24, 0xF6	; 246
 51c:	8a 95       	dec	r24
 51e:	f1 f7       	brne	.-4      	; 0x51c <main+0x8>
		_delay_us(50);         // Wait for >20usec
		PORTB = PORTB & 0x00;  // make low the Trigger input for Ultrasonic sensor
 520:	85 b1       	in	r24, 0x05	; 5
 522:	15 b8       	out	0x05, r1	; 5
		ultra();			   // display the distance
 524:	0e 94 53 02 	call	0x4a6	; 0x4a6 <ultra>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 528:	8f ef       	ldi	r24, 0xFF	; 255
 52a:	9f e7       	ldi	r25, 0x7F	; 127
 52c:	a6 e1       	ldi	r26, 0x16	; 22
 52e:	81 50       	subi	r24, 0x01	; 1
 530:	90 40       	sbci	r25, 0x00	; 0
 532:	a0 40       	sbci	r26, 0x00	; 0
 534:	e1 f7       	brne	.-8      	; 0x52e <main+0x1a>
 536:	00 c0       	rjmp	.+0      	; 0x538 <main+0x24>
 538:	00 00       	nop

		_delay_ms(500);
		lcd_cursor(1,1);
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	61 e0       	ldi	r22, 0x01	; 1
 53e:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
		dist=us_return();		//useful function in any other application program
 542:	0e 94 85 02 	call	0x50a	; 0x50a <us_return>
 546:	ac 01       	movw	r20, r24
		lcd_print(1,1,dist,5);
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	61 e0       	ldi	r22, 0x01	; 1
 54c:	25 e0       	ldi	r18, 0x05	; 5
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
 554:	8f ef       	ldi	r24, 0xFF	; 255
 556:	9f e7       	ldi	r25, 0x7F	; 127
 558:	a6 e1       	ldi	r26, 0x16	; 22
 55a:	81 50       	subi	r24, 0x01	; 1
 55c:	90 40       	sbci	r25, 0x00	; 0
 55e:	a0 40       	sbci	r26, 0x00	; 0
 560:	e1 f7       	brne	.-8      	; 0x55a <main+0x46>
 562:	00 c0       	rjmp	.+0      	; 0x564 <main+0x50>
 564:	00 00       	nop
 566:	d8 cf       	rjmp	.-80     	; 0x518 <main+0x4>

00000568 <__udivmodhi4>:
 568:	aa 1b       	sub	r26, r26
 56a:	bb 1b       	sub	r27, r27
 56c:	51 e1       	ldi	r21, 0x11	; 17
 56e:	07 c0       	rjmp	.+14     	; 0x57e <__udivmodhi4_ep>

00000570 <__udivmodhi4_loop>:
 570:	aa 1f       	adc	r26, r26
 572:	bb 1f       	adc	r27, r27
 574:	a6 17       	cp	r26, r22
 576:	b7 07       	cpc	r27, r23
 578:	10 f0       	brcs	.+4      	; 0x57e <__udivmodhi4_ep>
 57a:	a6 1b       	sub	r26, r22
 57c:	b7 0b       	sbc	r27, r23

0000057e <__udivmodhi4_ep>:
 57e:	88 1f       	adc	r24, r24
 580:	99 1f       	adc	r25, r25
 582:	5a 95       	dec	r21
 584:	a9 f7       	brne	.-22     	; 0x570 <__udivmodhi4_loop>
 586:	80 95       	com	r24
 588:	90 95       	com	r25
 58a:	bc 01       	movw	r22, r24
 58c:	cd 01       	movw	r24, r26
 58e:	08 95       	ret

00000590 <_exit>:
 590:	f8 94       	cli

00000592 <__stop_program>:
 592:	ff cf       	rjmp	.-2      	; 0x592 <__stop_program>
